{"ast":null,"code":"import { cachedCerts } from \"./certs\";\nimport { CODE_TYPE, Transformer } from \"./base\";\nimport { addCachedCerts, unpackAndVerify } from \"@pathcheck/dcc-sdk\";\n\nclass Covid19 extends Transformer {\n  constructor() {\n    super();\n    this.recognizer = \"HC1:\";\n    addCachedCerts(cachedCerts);\n  }\n\n  codeType() {\n    return CODE_TYPE.COVID19;\n  }\n\n  identified(raw) {\n    return raw.includes(this.recognizer);\n  }\n\n  async transform(raw) {\n    try {\n      return this.formatCovidCert(await this.fetchCovidCertDetails(raw));\n    } catch (e) {\n      console.log(e);\n      return \"This EU Digital COVID Certificate is INVALID!\";\n    }\n  }\n\n  async fetchCovidCertDetails(code) {\n    const cwtPayload = await unpackAndVerify(code);\n    const record = cwtPayload.get(-260).get(1);\n    const dob = record.dob;\n    const name = record[\"nam\"][\"fnt\"] + \"<<\" + record[\"nam\"][\"gnt\"];\n    const national_name = record[\"nam\"][\"fn\"] + \" \" + record[\"nam\"][\"gn\"];\n    const vaccination = this.extractVaccine(record);\n    const test = this.extractTest(record);\n    return {\n      name,\n      national_name,\n      dob,\n      vaccination,\n      test\n    };\n  }\n\n  extractTest(record) {\n    if (!record.t) return null;\n    const unique_cert_id = record.t[0][\"ci\"];\n    const issued_on = record.t[0][\"sc\"];\n    const issuer = record.t[0][\"is\"];\n    const test_type = record.t[0][\"tt\"];\n    const test_result = record.t[0][\"tr\"];\n    const country = record.t[0][\"co\"];\n    return {\n      unique_cert_id,\n      issued_on,\n      issuer,\n      test_type,\n      test_result,\n      country\n    };\n  }\n\n  extractVaccine(record) {\n    if (!record[\"v\"]) return null;\n    const unique_cert_id = record[\"v\"][0][\"ci\"];\n    const issued_on = record[\"v\"][0][\"dt\"];\n    const issuer = record[\"v\"][0][\"is\"];\n    const vaccine_type = record[\"v\"][0][\"mp\"];\n    const doses = record[\"v\"][0][\"dn\"];\n    const dose_series = record[\"v\"][0][\"sd\"];\n    const country = record[\"v\"][0][\"co\"];\n    return {\n      unique_cert_id,\n      issued_on,\n      issuer,\n      vaccine_type,\n      doses,\n      dose_series,\n      country\n    };\n  }\n\n  formatCovidCert(json) {\n    const format_date = new Intl.DateTimeFormat('en-GB', {\n      dateStyle: 'medium',\n      timeZone: 'UTC'\n    });\n    const format_datetime = new Intl.DateTimeFormat('en-GB', {\n      dateStyle: 'medium',\n      timeStyle: 'short',\n      timeZone: 'UTC'\n    });\n\n    const formatISO8601Date = ts => format_date.format(new Date(ts));\n\n    const formatISO8601DateTime = ts => format_datetime.format(new Date(ts));\n\n    let res = \"\";\n    res += `Name: ${json.name}\\n`;\n    res += `National name: ${json.national_name}\\n`;\n    res += `Born: ${formatISO8601Date(json.dob)}\\n`;\n\n    if (json.vaccination) {\n      let vaccine_type;\n\n      switch (json.vaccination.vaccine_type) {\n        case \"EU/1/20/1528\":\n          vaccine_type = \"Comirnaty (Pfizer)\";\n          break;\n\n        case \"EU/1/20/1507\":\n          vaccine_type = \"Spikevax\";\n          break;\n\n        case \"EU/1/20/1525\":\n          vaccine_type = \"Janssen\";\n          break;\n\n        case \"EU/1/21/1529\":\n          vaccine_type = \"Vaxzevria\";\n          break;\n\n        default:\n          vaccine_type = json.vaccination.product;\n      }\n\n      res += `Country: ${json.vaccination.country}\\n\\n`;\n      res += `Issued on: ${formatISO8601Date(json.vaccination.issued_on)}\\n`;\n      res += `Issuer: ${json.vaccination.issuer}\\n\\n`;\n      res += `Vaccine: ${vaccine_type}\\n`;\n      res += `Dose: ${json.vaccination.doses}/${json.vaccination.dose_series}\\n`;\n      res += `\\n${json.vaccination.unique_cert_id}\\n`;\n    }\n\n    if (json.test) {\n      let test_type;\n\n      switch (json.test.test_type) {\n        case \"LP217198-3\":\n          test_type = \"Rapid immunoassay\";\n          break;\n\n        case \"LP6464-4\":\n          test_type = \"PCR\";\n          break;\n\n        default:\n          test_type = json.test.test_type;\n      }\n\n      let test_result;\n\n      switch (json.test.test_result) {\n        case \"260415000\":\n          test_result = \"Negative\";\n          break;\n\n        case \"260373001\":\n          test_result = \"Positive\";\n          break;\n\n        case \"261665006\":\n          test_result = \"Unknown\";\n          break;\n\n        default:\n          test_result = json.test.test_result;\n      }\n\n      res += `Country: ${json.test.country}\\n\\n`;\n      res += `Issued: ${formatISO8601DateTime(json.test.issued_on)}\\n`;\n      res += `Issuer: ${json.test.issuer}\\n\\n`;\n      res += `Test type: ${test_type}\\n`;\n      res += `Test result: ${test_result}\\n`;\n      res += `\\n${json.test.unique_cert_id}\\n`;\n    }\n\n    return res;\n  }\n\n  static buttonCaption() {\n    return \"COVID\";\n  }\n\n}\n\nexport { Covid19 };","map":{"version":3,"sources":["/Users/jakechoi/Documents/StormhacksFall2024/stormhacks-2024/scanecipe/src/transformers/covid19.js"],"names":["cachedCerts","CODE_TYPE","Transformer","addCachedCerts","unpackAndVerify","Covid19","constructor","recognizer","codeType","COVID19","identified","raw","includes","transform","formatCovidCert","fetchCovidCertDetails","e","console","log","code","cwtPayload","record","get","dob","name","national_name","vaccination","extractVaccine","test","extractTest","t","unique_cert_id","issued_on","issuer","test_type","test_result","country","vaccine_type","doses","dose_series","json","format_date","Intl","DateTimeFormat","dateStyle","timeZone","format_datetime","timeStyle","formatISO8601Date","ts","format","Date","formatISO8601DateTime","res","product","buttonCaption"],"mappings":"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","sourcesContent":["import {cachedCerts} from \"./certs\";\nimport {CODE_TYPE, Transformer} from \"./base\";\nimport {addCachedCerts, unpackAndVerify} from \"@pathcheck/dcc-sdk\";\n\nclass Covid19 extends Transformer {\n  recognizer = \"HC1:\";\n\n  constructor() {\n    super();\n    addCachedCerts(cachedCerts);\n  }\n\n  codeType() {\n    return CODE_TYPE.COVID19;\n  }\n\n  identified(raw) {\n    return raw.includes(this.recognizer);\n  }\n\n  async transform(raw) {\n    try {\n      return this.formatCovidCert(await this.fetchCovidCertDetails(raw));\n    } catch (e) {\n      console.log(e);\n      return \"This EU Digital COVID Certificate is INVALID!\";\n    }\n  }\n\n  async fetchCovidCertDetails(code) {\n    const cwtPayload = await unpackAndVerify(code);\n    const record = cwtPayload.get(-260).get(1);\n\n    const dob = record.dob;\n    const name =  record[\"nam\"][\"fnt\"] + \"<<\" + record[\"nam\"][\"gnt\"];\n    const national_name = record[\"nam\"][\"fn\"] + \" \" + record[\"nam\"][\"gn\"];\n\n    const vaccination = this.extractVaccine(record);\n    const test = this.extractTest(record);\n\n    return {name, national_name, dob, vaccination, test};\n  };\n\n  extractTest(record) {\n    if (!record.t) return null;\n    const unique_cert_id = record.t[0][\"ci\"];\n    const issued_on = record.t[0][\"sc\"];\n    const issuer = record.t[0][\"is\"];\n    const test_type = record.t[0][\"tt\"];\n    const test_result = record.t[0][\"tr\"];\n    const country = record.t[0][\"co\"];\n\n    return {unique_cert_id, issued_on, issuer, test_type, test_result, country};\n  };\n\n  extractVaccine(record) {\n    if (!record[\"v\"]) return null;\n    const unique_cert_id = record[\"v\"][0][\"ci\"];\n    const issued_on = record[\"v\"][0][\"dt\"];\n    const issuer = record[\"v\"][0][\"is\"];\n    const vaccine_type = record[\"v\"][0][\"mp\"];\n    const doses = record[\"v\"][0][\"dn\"];\n    const dose_series = record[\"v\"][0][\"sd\"];\n    const country = record[\"v\"][0][\"co\"];\n\n    return {unique_cert_id, issued_on, issuer, vaccine_type, doses, dose_series, country};\n  };\n\n  formatCovidCert(json) {\n    const format_date = new Intl.DateTimeFormat('en-GB', {\n      dateStyle: 'medium',\n      timeZone: 'UTC',\n    });\n    const format_datetime = new Intl.DateTimeFormat('en-GB', {\n      dateStyle: 'medium',\n      timeStyle: 'short',\n      timeZone: 'UTC',\n    });\n    const formatISO8601Date = (ts) => format_date.format(new Date(ts));\n    const formatISO8601DateTime = (ts) => format_datetime.format(new Date(ts));\n\n    let res = \"\";\n    res += `Name: ${json.name}\\n`;\n    res += `National name: ${json.national_name}\\n`;\n    res += `Born: ${formatISO8601Date(json.dob)}\\n`;\n\n    if (json.vaccination) {\n      let vaccine_type;\n      switch (json.vaccination.vaccine_type) {\n        case \"EU/1/20/1528\":\n          vaccine_type = \"Comirnaty (Pfizer)\";\n          break;\n        case \"EU/1/20/1507\":\n          vaccine_type = \"Spikevax\";\n          break;\n        case \"EU/1/20/1525\":\n          vaccine_type = \"Janssen\";\n          break;\n        case \"EU/1/21/1529\":\n          vaccine_type = \"Vaxzevria\";\n          break;\n        default:\n          vaccine_type = json.vaccination.product;\n      }\n\n      res += `Country: ${json.vaccination.country}\\n\\n`;\n      res += `Issued on: ${formatISO8601Date(json.vaccination.issued_on)}\\n`;\n      res += `Issuer: ${json.vaccination.issuer}\\n\\n`;\n      res += `Vaccine: ${vaccine_type}\\n`;\n      res += `Dose: ${json.vaccination.doses}/${json.vaccination.dose_series}\\n`;\n      res += `\\n${json.vaccination.unique_cert_id}\\n`;\n    }\n\n    if (json.test) {\n      let test_type;\n      switch (json.test.test_type) {\n        case \"LP217198-3\":\n          test_type = \"Rapid immunoassay\";\n          break;\n        case \"LP6464-4\":\n          test_type = \"PCR\";\n          break;\n        default:\n          test_type = json.test.test_type;\n      }\n\n      let test_result;\n      switch (json.test.test_result) {\n        case \"260415000\":\n          test_result = \"Negative\";\n          break;\n        case \"260373001\":\n          test_result = \"Positive\";\n          break;\n        case \"261665006\":\n          test_result = \"Unknown\";\n          break;\n        default:\n          test_result = json.test.test_result;\n      }\n\n      res += `Country: ${json.test.country}\\n\\n`;\n      res += `Issued: ${formatISO8601DateTime(json.test.issued_on)}\\n`;\n      res += `Issuer: ${json.test.issuer}\\n\\n`;\n      res += `Test type: ${test_type}\\n`;\n      res += `Test result: ${test_result}\\n`;\n      res += `\\n${json.test.unique_cert_id}\\n`;\n    }\n\n    return res;\n  };\n\n  static buttonCaption() {\n    return \"COVID\";\n  }\n}\n\nexport {Covid19};"]},"metadata":{},"sourceType":"module"}