{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n}); // **Github:** https://github.com/fidm/x509\n//\n// **License:** MIT\n\n/**\n * BufferVisitor is a visit tool to manipulate buffer.\n */\n\nclass BufferVisitor {\n  constructor(buf) {\n    let start = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let end = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    this.start = start;\n    this.end = end > start ? end : start;\n    this.buf = buf;\n  }\n  /**\n   * return the underlying buffer length\n   */\n\n\n  get length() {\n    return this.buf.length;\n  }\n  /**\n   * Reset visitor' start and end value.\n   * @param start\n   * @param end\n   */\n\n\n  reset() {\n    let start = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let end = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    this.start = start;\n\n    if (end >= this.start) {\n      this.end = end;\n    } else if (this.end < this.start) {\n      this.end = this.start;\n    }\n\n    return this;\n  }\n  /**\n   * consume some bytes.\n   * @param steps steps to walk\n   */\n\n\n  walk(steps) {\n    this.start = this.end;\n    this.end += steps;\n    return this;\n  }\n  /**\n   * The buffer should have remaining the \"steps\" of bytes to consume,\n   * otherwise it will throw an error with given message.\n   * @param steps steps to consume.\n   * @param message message to throw.\n   */\n\n\n  mustHas(steps) {\n    let message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'Too few bytes to parse.';\n    const requested = this.end + steps;\n\n    if (requested > this.buf.length) {\n      const error = new Error(message);\n      error.available = this.buf.length;\n      error.requested = requested;\n      throw error;\n    }\n\n    this.walk(0);\n    return this;\n  }\n  /**\n   * Check the remaining bytes with bufferVisitor.mustHas method and then walk.\n   * @param steps steps to consume.\n   * @param message message to throw.\n   */\n\n\n  mustWalk(steps, message) {\n    this.mustHas(steps, message);\n    this.walk(steps);\n    return this;\n  }\n\n}\n\nexports.BufferVisitor = BufferVisitor;","map":{"version":3,"sources":["../src/common.ts"],"names":[],"mappings":"AAAA;;;;IACA;AACA;AACA;;AAEA;;AAEG;;AACH,MAAa,aAAb,CAA0B;AAIxB,EAAA,WAAA,CAAa,GAAb,EAA4D;AAAA,QAAlC,KAAkC,uEAAlB,CAAkB;AAAA,QAAf,GAAe,uEAAD,CAAC;AAC1D,SAAK,KAAL,GAAa,KAAb;AACA,SAAK,GAAL,GAAW,GAAG,GAAG,KAAN,GAAc,GAAd,GAAoB,KAA/B;AACA,SAAK,GAAL,GAAW,GAAX;AACD;AAED;;AAEG;;;AACO,MAAN,MAAM,GAAA;AACR,WAAO,KAAK,GAAL,CAAS,MAAhB;AACD;AAED;;;;AAIG;;;AACH,EAAA,KAAK,GAAoC;AAAA,QAAlC,KAAkC,uEAAlB,CAAkB;AAAA,QAAf,GAAe,uEAAD,CAAC;AACvC,SAAK,KAAL,GAAa,KAAb;;AACA,QAAI,GAAG,IAAI,KAAK,KAAhB,EAAuB;AACrB,WAAK,GAAL,GAAW,GAAX;AACD,KAFD,MAEO,IAAI,KAAK,GAAL,GAAW,KAAK,KAApB,EAA2B;AAChC,WAAK,GAAL,GAAW,KAAK,KAAhB;AACD;;AACD,WAAO,IAAP;AACD;AAED;;;AAGG;;;AACH,EAAA,IAAI,CAAE,KAAF,EAAe;AACjB,SAAK,KAAL,GAAa,KAAK,GAAlB;AACA,SAAK,GAAL,IAAY,KAAZ;AACA,WAAO,IAAP;AACD;AAED;;;;;AAKG;;;AACH,EAAA,OAAO,CAAE,KAAF,EAA4D;AAAA,QAA3C,OAA2C,uEAAzB,yBAAyB;AACjE,UAAM,SAAS,GAAG,KAAK,GAAL,GAAW,KAA7B;;AACA,QAAI,SAAS,GAAG,KAAK,GAAL,CAAS,MAAzB,EAAiC;AAC/B,YAAM,KAAK,GAAG,IAAI,KAAJ,CAAU,OAAV,CAAd;AACA,MAAA,KAAK,CAAC,SAAN,GAAkB,KAAK,GAAL,CAAS,MAA3B;AACA,MAAA,KAAK,CAAC,SAAN,GAAkB,SAAlB;AACA,YAAM,KAAN;AACD;;AACD,SAAK,IAAL,CAAU,CAAV;AACA,WAAO,IAAP;AACD;AAED;;;;AAIG;;;AACH,EAAA,QAAQ,CAAE,KAAF,EAAiB,OAAjB,EAAiC;AACvC,SAAK,OAAL,CAAa,KAAb,EAAoB,OAApB;AACA,SAAK,IAAL,CAAU,KAAV;AACA,WAAO,IAAP;AACD;;AArEuB;;AAA1B,OAAA,CAAA,aAAA,GAAA,aAAA","sourcesContent":["'use strict';\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// **Github:** https://github.com/fidm/x509\n//\n// **License:** MIT\n/**\n * BufferVisitor is a visit tool to manipulate buffer.\n */\nclass BufferVisitor {\n    constructor(buf, start = 0, end = 0) {\n        this.start = start;\n        this.end = end > start ? end : start;\n        this.buf = buf;\n    }\n    /**\n     * return the underlying buffer length\n     */\n    get length() {\n        return this.buf.length;\n    }\n    /**\n     * Reset visitor' start and end value.\n     * @param start\n     * @param end\n     */\n    reset(start = 0, end = 0) {\n        this.start = start;\n        if (end >= this.start) {\n            this.end = end;\n        }\n        else if (this.end < this.start) {\n            this.end = this.start;\n        }\n        return this;\n    }\n    /**\n     * consume some bytes.\n     * @param steps steps to walk\n     */\n    walk(steps) {\n        this.start = this.end;\n        this.end += steps;\n        return this;\n    }\n    /**\n     * The buffer should have remaining the \"steps\" of bytes to consume,\n     * otherwise it will throw an error with given message.\n     * @param steps steps to consume.\n     * @param message message to throw.\n     */\n    mustHas(steps, message = 'Too few bytes to parse.') {\n        const requested = this.end + steps;\n        if (requested > this.buf.length) {\n            const error = new Error(message);\n            error.available = this.buf.length;\n            error.requested = requested;\n            throw error;\n        }\n        this.walk(0);\n        return this;\n    }\n    /**\n     * Check the remaining bytes with bufferVisitor.mustHas method and then walk.\n     * @param steps steps to consume.\n     * @param message message to throw.\n     */\n    mustWalk(steps, message) {\n        this.mustHas(steps, message);\n        this.walk(steps);\n        return this;\n    }\n}\nexports.BufferVisitor = BufferVisitor;\n"]},"metadata":{},"sourceType":"script"}