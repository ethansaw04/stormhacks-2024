{"ast":null,"code":"import { cachedCerts } from \"./certs\";\nimport { CODE_TYPE, Transformer } from \"./base\";\nimport { addCachedCerts, unpackAndVerify } from \"@pathcheck/dcc-sdk\";\nclass Covid19 extends Transformer {\n  constructor() {\n    super();\n    this.recognizer = \"HC1:\";\n    addCachedCerts(cachedCerts);\n  }\n  codeType() {\n    return CODE_TYPE.COVID19;\n  }\n  identified(raw) {\n    return raw.includes(this.recognizer);\n  }\n  async transform(raw) {\n    try {\n      return this.formatCovidCert(await this.fetchCovidCertDetails(raw));\n    } catch (e) {\n      console.log(e);\n      return \"This EU Digital COVID Certificate is INVALID!\";\n    }\n  }\n  async fetchCovidCertDetails(code) {\n    const cwtPayload = await unpackAndVerify(code);\n    const record = cwtPayload.get(-260).get(1);\n    const dob = record.dob;\n    const name = record[\"nam\"][\"fnt\"] + \"<<\" + record[\"nam\"][\"gnt\"];\n    const national_name = record[\"nam\"][\"fn\"] + \" \" + record[\"nam\"][\"gn\"];\n    const vaccination = this.extractVaccine(record);\n    const test = this.extractTest(record);\n    return {\n      name,\n      national_name,\n      dob,\n      vaccination,\n      test\n    };\n  }\n  extractTest(record) {\n    if (!record.t) return null;\n    const unique_cert_id = record.t[0][\"ci\"];\n    const issued_on = record.t[0][\"sc\"];\n    const issuer = record.t[0][\"is\"];\n    const test_type = record.t[0][\"tt\"];\n    const test_result = record.t[0][\"tr\"];\n    const country = record.t[0][\"co\"];\n    return {\n      unique_cert_id,\n      issued_on,\n      issuer,\n      test_type,\n      test_result,\n      country\n    };\n  }\n  extractVaccine(record) {\n    if (!record[\"v\"]) return null;\n    const unique_cert_id = record[\"v\"][0][\"ci\"];\n    const issued_on = record[\"v\"][0][\"dt\"];\n    const issuer = record[\"v\"][0][\"is\"];\n    const vaccine_type = record[\"v\"][0][\"mp\"];\n    const doses = record[\"v\"][0][\"dn\"];\n    const dose_series = record[\"v\"][0][\"sd\"];\n    const country = record[\"v\"][0][\"co\"];\n    return {\n      unique_cert_id,\n      issued_on,\n      issuer,\n      vaccine_type,\n      doses,\n      dose_series,\n      country\n    };\n  }\n  formatCovidCert(json) {\n    const format_date = new Intl.DateTimeFormat('en-GB', {\n      dateStyle: 'medium',\n      timeZone: 'UTC'\n    });\n    const format_datetime = new Intl.DateTimeFormat('en-GB', {\n      dateStyle: 'medium',\n      timeStyle: 'short',\n      timeZone: 'UTC'\n    });\n    const formatISO8601Date = ts => format_date.format(new Date(ts));\n    const formatISO8601DateTime = ts => format_datetime.format(new Date(ts));\n    let res = \"\";\n    res += `Name: ${json.name}\\n`;\n    res += `National name: ${json.national_name}\\n`;\n    res += `Born: ${formatISO8601Date(json.dob)}\\n`;\n    if (json.vaccination) {\n      let vaccine_type;\n      switch (json.vaccination.vaccine_type) {\n        case \"EU/1/20/1528\":\n          vaccine_type = \"Comirnaty (Pfizer)\";\n          break;\n        case \"EU/1/20/1507\":\n          vaccine_type = \"Spikevax\";\n          break;\n        case \"EU/1/20/1525\":\n          vaccine_type = \"Janssen\";\n          break;\n        case \"EU/1/21/1529\":\n          vaccine_type = \"Vaxzevria\";\n          break;\n        default:\n          vaccine_type = json.vaccination.product;\n      }\n      res += `Country: ${json.vaccination.country}\\n\\n`;\n      res += `Issued on: ${formatISO8601Date(json.vaccination.issued_on)}\\n`;\n      res += `Issuer: ${json.vaccination.issuer}\\n\\n`;\n      res += `Vaccine: ${vaccine_type}\\n`;\n      res += `Dose: ${json.vaccination.doses}/${json.vaccination.dose_series}\\n`;\n      res += `\\n${json.vaccination.unique_cert_id}\\n`;\n    }\n    if (json.test) {\n      let test_type;\n      switch (json.test.test_type) {\n        case \"LP217198-3\":\n          test_type = \"Rapid immunoassay\";\n          break;\n        case \"LP6464-4\":\n          test_type = \"PCR\";\n          break;\n        default:\n          test_type = json.test.test_type;\n      }\n      let test_result;\n      switch (json.test.test_result) {\n        case \"260415000\":\n          test_result = \"Negative\";\n          break;\n        case \"260373001\":\n          test_result = \"Positive\";\n          break;\n        case \"261665006\":\n          test_result = \"Unknown\";\n          break;\n        default:\n          test_result = json.test.test_result;\n      }\n      res += `Country: ${json.test.country}\\n\\n`;\n      res += `Issued: ${formatISO8601DateTime(json.test.issued_on)}\\n`;\n      res += `Issuer: ${json.test.issuer}\\n\\n`;\n      res += `Test type: ${test_type}\\n`;\n      res += `Test result: ${test_result}\\n`;\n      res += `\\n${json.test.unique_cert_id}\\n`;\n    }\n    return res;\n  }\n  static buttonCaption() {\n    return \"COVID\";\n  }\n}\nexport { Covid19 };","map":{"version":3,"names":["cachedCerts","CODE_TYPE","Transformer","addCachedCerts","unpackAndVerify","Covid19","constructor","recognizer","codeType","COVID19","identified","raw","includes","transform","formatCovidCert","fetchCovidCertDetails","e","console","log","code","cwtPayload","record","get","dob","name","national_name","vaccination","extractVaccine","test","extractTest","t","unique_cert_id","issued_on","issuer","test_type","test_result","country","vaccine_type","doses","dose_series","json","format_date","Intl","DateTimeFormat","dateStyle","timeZone","format_datetime","timeStyle","formatISO8601Date","ts","format","Date","formatISO8601DateTime","res","product","buttonCaption"],"sources":["/Users/jakechoi/Documents/StormhacksFall2024/stormhacks-2024/scanecipe/src/transformers/covid19.js"],"sourcesContent":["import {cachedCerts} from \"./certs\";\nimport {CODE_TYPE, Transformer} from \"./base\";\nimport {addCachedCerts, unpackAndVerify} from \"@pathcheck/dcc-sdk\";\n\nclass Covid19 extends Transformer {\n  recognizer = \"HC1:\";\n\n  constructor() {\n    super();\n    addCachedCerts(cachedCerts);\n  }\n\n  codeType() {\n    return CODE_TYPE.COVID19;\n  }\n\n  identified(raw) {\n    return raw.includes(this.recognizer);\n  }\n\n  async transform(raw) {\n    try {\n      return this.formatCovidCert(await this.fetchCovidCertDetails(raw));\n    } catch (e) {\n      console.log(e);\n      return \"This EU Digital COVID Certificate is INVALID!\";\n    }\n  }\n\n  async fetchCovidCertDetails(code) {\n    const cwtPayload = await unpackAndVerify(code);\n    const record = cwtPayload.get(-260).get(1);\n\n    const dob = record.dob;\n    const name =  record[\"nam\"][\"fnt\"] + \"<<\" + record[\"nam\"][\"gnt\"];\n    const national_name = record[\"nam\"][\"fn\"] + \" \" + record[\"nam\"][\"gn\"];\n\n    const vaccination = this.extractVaccine(record);\n    const test = this.extractTest(record);\n\n    return {name, national_name, dob, vaccination, test};\n  };\n\n  extractTest(record) {\n    if (!record.t) return null;\n    const unique_cert_id = record.t[0][\"ci\"];\n    const issued_on = record.t[0][\"sc\"];\n    const issuer = record.t[0][\"is\"];\n    const test_type = record.t[0][\"tt\"];\n    const test_result = record.t[0][\"tr\"];\n    const country = record.t[0][\"co\"];\n\n    return {unique_cert_id, issued_on, issuer, test_type, test_result, country};\n  };\n\n  extractVaccine(record) {\n    if (!record[\"v\"]) return null;\n    const unique_cert_id = record[\"v\"][0][\"ci\"];\n    const issued_on = record[\"v\"][0][\"dt\"];\n    const issuer = record[\"v\"][0][\"is\"];\n    const vaccine_type = record[\"v\"][0][\"mp\"];\n    const doses = record[\"v\"][0][\"dn\"];\n    const dose_series = record[\"v\"][0][\"sd\"];\n    const country = record[\"v\"][0][\"co\"];\n\n    return {unique_cert_id, issued_on, issuer, vaccine_type, doses, dose_series, country};\n  };\n\n  formatCovidCert(json) {\n    const format_date = new Intl.DateTimeFormat('en-GB', {\n      dateStyle: 'medium',\n      timeZone: 'UTC',\n    });\n    const format_datetime = new Intl.DateTimeFormat('en-GB', {\n      dateStyle: 'medium',\n      timeStyle: 'short',\n      timeZone: 'UTC',\n    });\n    const formatISO8601Date = (ts) => format_date.format(new Date(ts));\n    const formatISO8601DateTime = (ts) => format_datetime.format(new Date(ts));\n\n    let res = \"\";\n    res += `Name: ${json.name}\\n`;\n    res += `National name: ${json.national_name}\\n`;\n    res += `Born: ${formatISO8601Date(json.dob)}\\n`;\n\n    if (json.vaccination) {\n      let vaccine_type;\n      switch (json.vaccination.vaccine_type) {\n        case \"EU/1/20/1528\":\n          vaccine_type = \"Comirnaty (Pfizer)\";\n          break;\n        case \"EU/1/20/1507\":\n          vaccine_type = \"Spikevax\";\n          break;\n        case \"EU/1/20/1525\":\n          vaccine_type = \"Janssen\";\n          break;\n        case \"EU/1/21/1529\":\n          vaccine_type = \"Vaxzevria\";\n          break;\n        default:\n          vaccine_type = json.vaccination.product;\n      }\n\n      res += `Country: ${json.vaccination.country}\\n\\n`;\n      res += `Issued on: ${formatISO8601Date(json.vaccination.issued_on)}\\n`;\n      res += `Issuer: ${json.vaccination.issuer}\\n\\n`;\n      res += `Vaccine: ${vaccine_type}\\n`;\n      res += `Dose: ${json.vaccination.doses}/${json.vaccination.dose_series}\\n`;\n      res += `\\n${json.vaccination.unique_cert_id}\\n`;\n    }\n\n    if (json.test) {\n      let test_type;\n      switch (json.test.test_type) {\n        case \"LP217198-3\":\n          test_type = \"Rapid immunoassay\";\n          break;\n        case \"LP6464-4\":\n          test_type = \"PCR\";\n          break;\n        default:\n          test_type = json.test.test_type;\n      }\n\n      let test_result;\n      switch (json.test.test_result) {\n        case \"260415000\":\n          test_result = \"Negative\";\n          break;\n        case \"260373001\":\n          test_result = \"Positive\";\n          break;\n        case \"261665006\":\n          test_result = \"Unknown\";\n          break;\n        default:\n          test_result = json.test.test_result;\n      }\n\n      res += `Country: ${json.test.country}\\n\\n`;\n      res += `Issued: ${formatISO8601DateTime(json.test.issued_on)}\\n`;\n      res += `Issuer: ${json.test.issuer}\\n\\n`;\n      res += `Test type: ${test_type}\\n`;\n      res += `Test result: ${test_result}\\n`;\n      res += `\\n${json.test.unique_cert_id}\\n`;\n    }\n\n    return res;\n  };\n\n  static buttonCaption() {\n    return \"COVID\";\n  }\n}\n\nexport {Covid19};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}