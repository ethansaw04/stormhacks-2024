{"ast":null,"code":"'use strict';\n\nfunction required(str, fieldName) {\n  if (str.trim().length === 0) error(`${fieldName} is required`);\n  return str;\n}\n\nfunction validSlog(str) {\n  if (str !== 'UPNQR') error('Invalid code');\n  return str;\n}\n\nfunction validIBAN(str) {\n  if (str.length > 19) error('Invalid IBAN');\n  return str;\n}\n\nconst kodaNamenaRE = /^[A-Z]{4}$/;\n\nfunction validKodaNamena(str, fieldName) {\n  if (!kodaNamenaRE.test(str)) error(`Invalid ${fieldName}`);\n  return str;\n}\n\nfunction parseDate(str) {\n  if (!str) return str;\n  if (str.length !== 10) error(`Invalid date length ${str}`);\n  const parts = str.split('.');\n  if (parts.length !== 3) error('Invalid date format');\n  const d = new Date();\n  d.setTime(0);\n  d.setDate(num(parts[0]));\n  d.setMonth(num(parts[1]) - 1);\n  d.setFullYear(num(parts[2]));\n  return d;\n}\n\nfunction parseBool(str, fieldName) {\n  if (str !== '' && str !== 'X') error(`Invalid bool \"${str}\" for ${fieldName}`);\n  return str === 'X';\n}\n\nfunction parseAmount(str) {\n  const n = num(str);\n  if (Number.isNaN(n)) error(`Invalid amount ${str}`);\n  return n / 100;\n}\n\nfunction formatDate(date) {\n  if (!(date instanceof Date)) error('Invalid date object');\n  return `${pad(date.getDate() + '')}.${pad(date.getMonth() + 1 + '')}.${date.getFullYear()}`;\n}\n\nfunction formatBool(bool) {\n  return bool ? 'X' : '';\n}\n\nfunction formatAmount(amount) {\n  return pad(Math.floor(amount * 100).toString(), 11);\n}\n\nconst validLength = memoize(function (length) {\n  return function (str, fieldName) {\n    if (str.length > length) error(`Invalid length. ${fieldName} max len is ${length}, got ${str.length}`);\n    return str;\n  };\n});\n\nfunction error(msg) {\n  throw new (require('./upnqr').UPNQRError)(msg);\n}\n\nfunction num(str) {\n  return parseInt(str, 10);\n}\n\nfunction pad(str) {\n  let n = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n\n  while (str.length < n) str = '0' + str;\n\n  return str;\n}\n\nfunction memoize(fn) {\n  return function () {\n    let hash = '';\n    let i = arguments.length;\n\n    while (i--) {\n      const currentArg = arguments[i];\n      hash += currentArg === Object(currentArg) ? JSON.stringify(currentArg) : currentArg;\n    }\n\n    if (!fn.memoize) fn.memoize = {};\n    return hash in fn.memoize ? fn.memoize[hash] : fn.memoize[hash] = fn.apply(this, arguments);\n  };\n}\n\nmodule.exports = {\n  required,\n  validSlog,\n  validIBAN,\n  validLength,\n  validKodaNamena,\n  parseDate,\n  parseBool,\n  parseAmount,\n  formatDate,\n  formatBool,\n  formatAmount\n};","map":{"version":3,"sources":["C:/Users/ethan/Documents/stormhacks-2024/scanecipe/node_modules/upnqr/lib/util.js"],"names":["required","str","fieldName","trim","length","error","validSlog","validIBAN","kodaNamenaRE","validKodaNamena","test","parseDate","parts","split","d","Date","setTime","setDate","num","setMonth","setFullYear","parseBool","parseAmount","n","Number","isNaN","formatDate","date","pad","getDate","getMonth","getFullYear","formatBool","bool","formatAmount","amount","Math","floor","toString","validLength","memoize","msg","require","UPNQRError","parseInt","fn","hash","i","arguments","currentArg","Object","JSON","stringify","apply","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nfunction required (str, fieldName) {\n  if (str.trim().length === 0) error(`${fieldName} is required`)\n  return str\n}\n\nfunction validSlog (str) {\n  if (str !== 'UPNQR') error('Invalid code')\n  return str\n}\n\nfunction validIBAN (str) {\n  if (str.length > 19) error('Invalid IBAN')\n  return str\n}\n\nconst kodaNamenaRE = /^[A-Z]{4}$/\nfunction validKodaNamena (str, fieldName) {\n  if (!kodaNamenaRE.test(str)) error(`Invalid ${fieldName}`)\n  return str\n}\n\nfunction parseDate (str) {\n  if (!str) return str\n  if (str.length !== 10) error(`Invalid date length ${str}`)\n  const parts = str.split('.')\n  if (parts.length !== 3) error('Invalid date format')\n  const d = new Date()\n  d.setTime(0)\n  d.setDate(num(parts[0]))\n  d.setMonth(num(parts[1]) - 1)\n  d.setFullYear(num(parts[2]))\n  return d\n}\n\nfunction parseBool (str, fieldName) {\n  if (str !== '' && str !== 'X') error(`Invalid bool \"${str}\" for ${fieldName}`)\n  return str === 'X'\n}\n\nfunction parseAmount (str) {\n  const n = num(str)\n  if (Number.isNaN(n)) error(`Invalid amount ${str}`)\n  return n / 100\n}\n\nfunction formatDate (date) {\n  if (!(date instanceof Date)) error('Invalid date object')\n  return `${pad(date.getDate() + '')}.${pad(date.getMonth() + 1 + '')}.${date.getFullYear()}`\n}\n\nfunction formatBool (bool) {\n  return bool ? 'X' : ''\n}\n\nfunction formatAmount (amount) {\n  return pad(Math.floor(amount * 100).toString(), 11)\n}\n\nconst validLength = memoize(function (length) {\n  return function (str, fieldName) {\n    if (str.length > length) error(`Invalid length. ${fieldName} max len is ${length}, got ${str.length}`)\n    return str\n  }\n})\n\nfunction error (msg) {\n  throw new (require('./upnqr').UPNQRError)(msg)\n}\n\nfunction num (str) {\n  return parseInt(str, 10)\n}\n\nfunction pad (str, n = 2) {\n  while (str.length < n) str = '0' + str\n  return str\n}\n\nfunction memoize (fn) {\n  return function () {\n    let hash = ''\n    let i = arguments.length\n    while (i--) {\n      const currentArg = arguments[i]\n      hash += currentArg === Object(currentArg) ? JSON.stringify(currentArg) : currentArg\n    }\n    if (!fn.memoize) fn.memoize = {}\n    return hash in fn.memoize ? fn.memoize[hash] : (fn.memoize[hash] = fn.apply(this, arguments))\n  }\n}\n\nmodule.exports = {\n  required,\n  validSlog,\n  validIBAN,\n  validLength,\n  validKodaNamena,\n  parseDate,\n  parseBool,\n  parseAmount,\n  formatDate,\n  formatBool,\n  formatAmount\n}\n"]},"metadata":{},"sourceType":"script"}