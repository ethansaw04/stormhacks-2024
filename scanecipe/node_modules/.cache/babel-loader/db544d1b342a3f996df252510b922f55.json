{"ast":null,"code":"import fetch from 'cross-fetch';\nlet TRUST_REGISTRY = {};\nlet LAST_FETCH = undefined;\nconst ONE_DAY_IN_MSECONDS = 86400000;\n\n/** add kid, public cert PEM pairs  */\nexport function addCachedCerts(array) {\n  for (const [key, value] of Object.entries(array)) {\n    TRUST_REGISTRY[key] = {\n      \"displayName\": {\n        \"en\": \"\"\n      },\n      \"entityType\": \"issuer\",\n      \"status\": \"current\",\n      \"credentialType\": [\"v\", \"t\", \"r\"],\n      \"validFromDT\": \"2021-01-01T01:00:00.000Z\",\n      \"didDocument\": '-----BEGIN CERTIFICATE-----\\n' + value + '\\n-----END CERTIFICATE-----'\n    };\n  }\n}\n\n/** add kid, public key PEM pairs  */\nexport function addCachedKeys(array) {\n  for (const [key, value] of Object.entries(array)) {\n    TRUST_REGISTRY[key] = {\n      \"displayName\": {\n        \"en\": \"\"\n      },\n      \"entityType\": \"issuer\",\n      \"status\": \"current\",\n      \"credentialType\": [\"v\", \"t\", \"r\"],\n      \"validFromDT\": \"2021-01-01T01:00:00.000Z\",\n      \"didDocument\": '-----BEGIN PUBLIC KEY-----\\n' + value + '\\n-----END PUBLIC KEY-----'\n    };\n  }\n}\nexport async function resolveKey(kID) {\n  if (!TRUST_REGISTRY[kID] && (!LAST_FETCH || new Date().getTime() > LAST_FETCH.getTime() + ONE_DAY_IN_MSECONDS)) {\n    // Loading PathCheck Registry\n    console.log('KeyID not found: ', kID, ' fetching certificates from PathCheck\\'s Trust Registry');\n    try {\n      const res = await fetch('https://raw.githubusercontent.com/Path-Check/trust-registry/main/registry.json', {\n        method: 'GET',\n        mode: 'no-cors'\n      });\n      const data = await res.text();\n      TRUST_REGISTRY = JSON.parse(data)[\"EUDCC\"];\n    } catch (e) {\n      console.log(e);\n    }\n    LAST_FETCH = new Date();\n  }\n  if (TRUST_REGISTRY[kID]) {\n    return TRUST_REGISTRY[kID];\n  }\n  return undefined;\n}","map":{"version":3,"names":["fetch","TRUST_REGISTRY","LAST_FETCH","undefined","ONE_DAY_IN_MSECONDS","addCachedCerts","array","key","value","Object","entries","addCachedKeys","resolveKey","kID","Date","getTime","console","log","res","method","mode","data","text","JSON","parse","e"],"sources":["/Users/jakechoi/Documents/StormhacksFall2024/stormhacks-2024/scanecipe/node_modules/@pathcheck/dcc-sdk/lib/resolver.js"],"sourcesContent":["import fetch from 'cross-fetch'\n\nlet TRUST_REGISTRY = {}\n\nlet LAST_FETCH = undefined;\nconst ONE_DAY_IN_MSECONDS = 86400000;\n\n/** add kid, public cert PEM pairs  */\nexport function addCachedCerts(array) {\n  for (const [key, value] of Object.entries(array)) {\n    TRUST_REGISTRY[key] = {\n      \"displayName\": {  \"en\": \"\" },\n      \"entityType\": \"issuer\",\n      \"status\": \"current\",\n      \"credentialType\": [\"v\",\"t\",\"r\"],\n      \"validFromDT\":  \"2021-01-01T01:00:00.000Z\",\n      \"didDocument\": '-----BEGIN CERTIFICATE-----\\n' + value + '\\n-----END CERTIFICATE-----'\n    }\n  }\n}\n\n/** add kid, public key PEM pairs  */\nexport function addCachedKeys(array) {\n  for (const [key, value] of Object.entries(array)) {\n    TRUST_REGISTRY[key] = {\n      \"displayName\": {  \"en\": \"\" },\n      \"entityType\": \"issuer\",\n      \"status\": \"current\",\n      \"credentialType\": [\"v\",\"t\",\"r\"],\n      \"validFromDT\":  \"2021-01-01T01:00:00.000Z\",\n      \"didDocument\": '-----BEGIN PUBLIC KEY-----\\n' + value + '\\n-----END PUBLIC KEY-----'\n    }\n  }\n}\n\nexport async function resolveKey(kID) {\n  if (!TRUST_REGISTRY[kID] && (!LAST_FETCH || new Date().getTime() > LAST_FETCH.getTime() + ONE_DAY_IN_MSECONDS )) {\n    // Loading PathCheck Registry\n    console.log('KeyID not found: ', kID, ' fetching certificates from PathCheck\\'s Trust Registry')\n\n    try {\n      const res = await fetch('https://raw.githubusercontent.com/Path-Check/trust-registry/main/registry.json', {method: 'GET', mode: 'no-cors'})\n      const data = await res.text()\n      TRUST_REGISTRY = JSON.parse(data)[\"EUDCC\"];\n    } catch (e) {\n      console.log(e);\n    }\n\n    LAST_FETCH = new Date();\n  }\n\n  if (TRUST_REGISTRY[kID]) {\n    return TRUST_REGISTRY[kID];\n  }\n\n  return undefined\n}\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,aAAa;AAE/B,IAAIC,cAAc,GAAG,CAAC,CAAC;AAEvB,IAAIC,UAAU,GAAGC,SAAS;AAC1B,MAAMC,mBAAmB,GAAG,QAAQ;;AAEpC;AACA,OAAO,SAASC,cAAcA,CAACC,KAAK,EAAE;EACpC,KAAK,MAAM,CAACC,GAAG,EAAEC,KAAK,CAAC,IAAIC,MAAM,CAACC,OAAO,CAACJ,KAAK,CAAC,EAAE;IAChDL,cAAc,CAACM,GAAG,CAAC,GAAG;MACpB,aAAa,EAAE;QAAG,IAAI,EAAE;MAAG,CAAC;MAC5B,YAAY,EAAE,QAAQ;MACtB,QAAQ,EAAE,SAAS;MACnB,gBAAgB,EAAE,CAAC,GAAG,EAAC,GAAG,EAAC,GAAG,CAAC;MAC/B,aAAa,EAAG,0BAA0B;MAC1C,aAAa,EAAE,+BAA+B,GAAGC,KAAK,GAAG;IAC3D,CAAC;EACH;AACF;;AAEA;AACA,OAAO,SAASG,aAAaA,CAACL,KAAK,EAAE;EACnC,KAAK,MAAM,CAACC,GAAG,EAAEC,KAAK,CAAC,IAAIC,MAAM,CAACC,OAAO,CAACJ,KAAK,CAAC,EAAE;IAChDL,cAAc,CAACM,GAAG,CAAC,GAAG;MACpB,aAAa,EAAE;QAAG,IAAI,EAAE;MAAG,CAAC;MAC5B,YAAY,EAAE,QAAQ;MACtB,QAAQ,EAAE,SAAS;MACnB,gBAAgB,EAAE,CAAC,GAAG,EAAC,GAAG,EAAC,GAAG,CAAC;MAC/B,aAAa,EAAG,0BAA0B;MAC1C,aAAa,EAAE,8BAA8B,GAAGC,KAAK,GAAG;IAC1D,CAAC;EACH;AACF;AAEA,OAAO,eAAeI,UAAUA,CAACC,GAAG,EAAE;EACpC,IAAI,CAACZ,cAAc,CAACY,GAAG,CAAC,KAAK,CAACX,UAAU,IAAI,IAAIY,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC,GAAGb,UAAU,CAACa,OAAO,CAAC,CAAC,GAAGX,mBAAmB,CAAE,EAAE;IAC/G;IACAY,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEJ,GAAG,EAAE,yDAAyD,CAAC;IAEhG,IAAI;MACF,MAAMK,GAAG,GAAG,MAAMlB,KAAK,CAAC,gFAAgF,EAAE;QAACmB,MAAM,EAAE,KAAK;QAAEC,IAAI,EAAE;MAAS,CAAC,CAAC;MAC3I,MAAMC,IAAI,GAAG,MAAMH,GAAG,CAACI,IAAI,CAAC,CAAC;MAC7BrB,cAAc,GAAGsB,IAAI,CAACC,KAAK,CAACH,IAAI,CAAC,CAAC,OAAO,CAAC;IAC5C,CAAC,CAAC,OAAOI,CAAC,EAAE;MACVT,OAAO,CAACC,GAAG,CAACQ,CAAC,CAAC;IAChB;IAEAvB,UAAU,GAAG,IAAIY,IAAI,CAAC,CAAC;EACzB;EAEA,IAAIb,cAAc,CAACY,GAAG,CAAC,EAAE;IACvB,OAAOZ,cAAc,CAACY,GAAG,CAAC;EAC5B;EAEA,OAAOV,SAAS;AAClB","ignoreList":[]},"metadata":{},"sourceType":"module"}