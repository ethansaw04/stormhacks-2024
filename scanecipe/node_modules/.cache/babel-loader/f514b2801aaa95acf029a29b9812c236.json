{"ast":null,"code":"import * as ASN from '@fidm/asn1';\nconst RSA_IOD = \"1.2.840.113549.1.1.1\";\n/**\n * ASN.1 Template for PKCS#8 Public Key.\n */\n\nconst PublicKeyValidator = {\n  name: 'PublicKeyInfo',\n  class: ASN.Class.UNIVERSAL,\n  tag: ASN.Tag.SEQUENCE,\n  capture: 'publicKeyInfo',\n  value: [{\n    name: 'PublicKeyInfo.AlgorithmIdentifier',\n    class: ASN.Class.UNIVERSAL,\n    tag: ASN.Tag.SEQUENCE,\n    value: [{\n      name: 'PublicKeyAlgorithmIdentifier.algorithm',\n      class: ASN.Class.UNIVERSAL,\n      tag: ASN.Tag.OID,\n      capture: 'publicKeyOID'\n    }]\n  }, {\n    name: 'PublicKeyInfo.PublicKey',\n    class: ASN.Class.UNIVERSAL,\n    tag: ASN.Tag.BITSTRING,\n    capture: 'publicKey'\n  }]\n}; // validator for an X.509v3 certificate\n\nconst x509CertificateValidator = {\n  name: 'Certificate',\n  class: ASN.Class.UNIVERSAL,\n  tag: ASN.Tag.SEQUENCE,\n  value: [{\n    name: 'Certificate.TBSCertificate',\n    class: ASN.Class.UNIVERSAL,\n    tag: ASN.Tag.SEQUENCE,\n    capture: 'tbsCertificate',\n    value: [{\n      name: 'Certificate.TBSCertificate.version',\n      class: ASN.Class.CONTEXT_SPECIFIC,\n      tag: ASN.Tag.NONE,\n      optional: true,\n      value: [{\n        name: 'Certificate.TBSCertificate.version.integer',\n        class: ASN.Class.UNIVERSAL,\n        tag: ASN.Tag.INTEGER,\n        capture: 'certVersion'\n      }]\n    }, {\n      name: 'Certificate.TBSCertificate.serialNumber',\n      class: ASN.Class.UNIVERSAL,\n      tag: ASN.Tag.INTEGER,\n      capture: 'certSerialNumber'\n    }, {\n      name: 'Certificate.TBSCertificate.signature',\n      class: ASN.Class.UNIVERSAL,\n      tag: ASN.Tag.SEQUENCE,\n      value: [{\n        name: 'Certificate.TBSCertificate.signature.algorithm',\n        class: ASN.Class.UNIVERSAL,\n        tag: ASN.Tag.OID,\n        capture: 'certinfoSignatureOID'\n      }, {\n        name: 'Certificate.TBSCertificate.signature.parameters',\n        class: ASN.Class.UNIVERSAL,\n        tag: ASN.Tag.OCTETSTRING,\n        optional: true,\n        capture: 'certinfoSignatureParams'\n      }]\n    }, {\n      name: 'Certificate.TBSCertificate.issuer',\n      class: ASN.Class.UNIVERSAL,\n      tag: ASN.Tag.SEQUENCE,\n      capture: 'certIssuer'\n    }, {\n      name: 'Certificate.TBSCertificate.validity',\n      class: ASN.Class.UNIVERSAL,\n      tag: ASN.Tag.SEQUENCE,\n      value: [{\n        name: 'Certificate.TBSCertificate.validity.notBefore',\n        class: ASN.Class.UNIVERSAL,\n        tag: [ASN.Tag.UTCTIME, ASN.Tag.GENERALIZEDTIME],\n        capture: 'certValidityNotBefore'\n      }, {\n        name: 'Certificate.TBSCertificate.validity.notAfter',\n        class: ASN.Class.UNIVERSAL,\n        tag: [ASN.Tag.UTCTIME, ASN.Tag.GENERALIZEDTIME],\n        capture: 'certValidityNotAfter'\n      }]\n    }, {\n      // Name (subject) (RDNSequence)\n      name: 'Certificate.TBSCertificate.subject',\n      class: ASN.Class.UNIVERSAL,\n      tag: ASN.Tag.SEQUENCE,\n      capture: 'certSubject'\n    }, // SubjectPublicKeyInfo\n    PublicKeyValidator, {\n      // issuerUniqueID (optional)\n      name: 'Certificate.TBSCertificate.issuerUniqueID',\n      class: ASN.Class.CONTEXT_SPECIFIC,\n      tag: ASN.Tag.BOOLEAN,\n      optional: true,\n      value: [{\n        name: 'Certificate.TBSCertificate.issuerUniqueID.id',\n        class: ASN.Class.UNIVERSAL,\n        tag: ASN.Tag.BITSTRING,\n        capture: 'certIssuerUniqueId'\n      }]\n    }, {\n      // subjectUniqueID (optional)\n      name: 'Certificate.TBSCertificate.subjectUniqueID',\n      class: ASN.Class.CONTEXT_SPECIFIC,\n      tag: ASN.Tag.INTEGER,\n      optional: true,\n      value: [{\n        name: 'Certificate.TBSCertificate.subjectUniqueID.id',\n        class: ASN.Class.UNIVERSAL,\n        tag: ASN.Tag.BITSTRING,\n        capture: 'certSubjectUniqueId'\n      }]\n    }, {\n      // Extensions (optional)\n      name: 'Certificate.TBSCertificate.extensions',\n      class: ASN.Class.CONTEXT_SPECIFIC,\n      tag: ASN.Tag.BITSTRING,\n      capture: 'certExtensions',\n      optional: true\n    }]\n  }, {\n    // AlgorithmIdentifier (signature algorithm)\n    name: 'Certificate.signatureAlgorithm',\n    class: ASN.Class.UNIVERSAL,\n    tag: ASN.Tag.SEQUENCE,\n    value: [{\n      // algorithm\n      name: 'Certificate.signatureAlgorithm.algorithm',\n      class: ASN.Class.UNIVERSAL,\n      tag: ASN.Tag.OID,\n      capture: 'certSignatureOID'\n    }, {\n      name: 'Certificate.TBSCertificate.signature.parameters',\n      class: ASN.Class.UNIVERSAL,\n      tag: ASN.Tag.OCTETSTRING,\n      optional: true,\n      capture: 'certSignatureParams'\n    }]\n  }, {\n    name: 'Certificate.signatureValue',\n    class: ASN.Class.UNIVERSAL,\n    tag: ASN.Tag.BITSTRING,\n    capture: 'certSignature'\n  }]\n};\nexport function getDERFromPEM(pem) {\n  return ASN.PEM.parse(pem)[0].body;\n}\n\nfunction toBase64URL(buffer) {\n  return buffer.toString('base64').replace(/=/g, \"\").replace(/\\+/g, \"-\").replace(/\\//g, \"_\");\n}\n\nexport function getJWTFromPEM(pem) {\n  const obj = ASN.ASN1.fromDER(getDERFromPEM(pem), true);\n  let publicKey = {\n    oid: undefined,\n    keyRaw: undefined\n  };\n\n  if (pem.includes(\"CERTIFICATE\")) {\n    const certCaptures = {};\n    obj.validate(x509CertificateValidator, certCaptures);\n    const publicKeyCaptures = {};\n    certCaptures.publicKeyInfo.validate(PublicKeyValidator, publicKeyCaptures);\n    publicKey.oid = ASN.ASN1.parseOID(publicKeyCaptures.publicKeyOID.bytes);\n    publicKey.keyRaw = ASN.ASN1.parseBitString(publicKeyCaptures.publicKey.bytes).buf;\n  } else {\n    const captures = {};\n    obj.validate(PublicKeyValidator, captures);\n    publicKey.oid = ASN.ASN1.parseOID(captures.publicKeyOID.bytes);\n    publicKey.keyRaw = ASN.ASN1.parseBitString(captures.publicKey.bytes).buf;\n  } // if RSA\n  // Find better ways to parse key parameters. \n\n\n  if (publicKey.oid === RSA_IOD) {\n    let pk = publicKey.keyRaw;\n    const keyMod = toBase64URL(pk.slice(9, pk.length - 5));\n    const keyExp = toBase64URL(pk.slice(pk.length - 3, pk.length));\n    return {\n      alg: 'PS256',\n      kid: undefined,\n      n: keyMod,\n      e: keyExp\n    };\n  } else {\n    let pk = publicKey.keyRaw;\n    const keyX = toBase64URL(pk.slice(1, 1 + 32));\n    const keyY = toBase64URL(pk.slice(33, 33 + 32));\n    return {\n      alg: 'ES256',\n      kid: undefined,\n      x: keyX,\n      y: keyY\n    };\n  }\n}","map":{"version":3,"sources":["/Users/jakechoi/Documents/StormhacksFall2024/stormhacks-2024/scanecipe/node_modules/@pathcheck/dcc-sdk/lib/key-parser.js"],"names":["ASN","RSA_IOD","PublicKeyValidator","name","class","Class","UNIVERSAL","tag","Tag","SEQUENCE","capture","value","OID","BITSTRING","x509CertificateValidator","CONTEXT_SPECIFIC","NONE","optional","INTEGER","OCTETSTRING","UTCTIME","GENERALIZEDTIME","BOOLEAN","getDERFromPEM","pem","PEM","parse","body","toBase64URL","buffer","toString","replace","getJWTFromPEM","obj","ASN1","fromDER","publicKey","oid","undefined","keyRaw","includes","certCaptures","validate","publicKeyCaptures","publicKeyInfo","parseOID","publicKeyOID","bytes","parseBitString","buf","captures","pk","keyMod","slice","length","keyExp","alg","kid","n","e","keyX","keyY","x","y"],"mappings":"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","sourcesContent":["import * as ASN from '@fidm/asn1';\n\nconst RSA_IOD = \"1.2.840.113549.1.1.1\";\n\n/**\n * ASN.1 Template for PKCS#8 Public Key.\n */\nconst PublicKeyValidator = {\n    name: 'PublicKeyInfo',\n    class: ASN.Class.UNIVERSAL,\n    tag: ASN.Tag.SEQUENCE,\n    capture: 'publicKeyInfo',\n    value: [{\n            name: 'PublicKeyInfo.AlgorithmIdentifier',\n            class: ASN.Class.UNIVERSAL,\n            tag: ASN.Tag.SEQUENCE,\n            value: [{\n                    name: 'PublicKeyAlgorithmIdentifier.algorithm',\n                    class: ASN.Class.UNIVERSAL,\n                    tag: ASN.Tag.OID,\n                    capture: 'publicKeyOID',\n                }],\n        }, {\n            name: 'PublicKeyInfo.PublicKey',\n            class: ASN.Class.UNIVERSAL,\n            tag: ASN.Tag.BITSTRING,\n            capture: 'publicKey',\n        }],\n};\n\n// validator for an X.509v3 certificate\nconst x509CertificateValidator = {\n    name: 'Certificate',\n    class: ASN.Class.UNIVERSAL,\n    tag: ASN.Tag.SEQUENCE,\n    value: [{\n            name: 'Certificate.TBSCertificate',\n            class: ASN.Class.UNIVERSAL,\n            tag: ASN.Tag.SEQUENCE,\n            capture: 'tbsCertificate',\n            value: [{\n                    name: 'Certificate.TBSCertificate.version',\n                    class: ASN.Class.CONTEXT_SPECIFIC,\n                    tag: ASN.Tag.NONE,\n                    optional: true,\n                    value: [{\n                            name: 'Certificate.TBSCertificate.version.integer',\n                            class: ASN.Class.UNIVERSAL,\n                            tag: ASN.Tag.INTEGER,\n                            capture: 'certVersion',\n                        }],\n                }, {\n                    name: 'Certificate.TBSCertificate.serialNumber',\n                    class: ASN.Class.UNIVERSAL,\n                    tag: ASN.Tag.INTEGER,\n                    capture: 'certSerialNumber',\n                }, {\n                    name: 'Certificate.TBSCertificate.signature',\n                    class: ASN.Class.UNIVERSAL,\n                    tag: ASN.Tag.SEQUENCE,\n                    value: [{\n                            name: 'Certificate.TBSCertificate.signature.algorithm',\n                            class: ASN.Class.UNIVERSAL,\n                            tag: ASN.Tag.OID,\n                            capture: 'certinfoSignatureOID',\n                        }, {\n                            name: 'Certificate.TBSCertificate.signature.parameters',\n                            class: ASN.Class.UNIVERSAL,\n                            tag: ASN.Tag.OCTETSTRING,\n                            optional: true,\n                            capture: 'certinfoSignatureParams',\n                        }],\n                }, {\n                    name: 'Certificate.TBSCertificate.issuer',\n                    class: ASN.Class.UNIVERSAL,\n                    tag: ASN.Tag.SEQUENCE,\n                    capture: 'certIssuer',\n                }, {\n                    name: 'Certificate.TBSCertificate.validity',\n                    class: ASN.Class.UNIVERSAL,\n                    tag: ASN.Tag.SEQUENCE,\n                    value: [{\n                            name: 'Certificate.TBSCertificate.validity.notBefore',\n                            class: ASN.Class.UNIVERSAL,\n                            tag: [ASN.Tag.UTCTIME, ASN.Tag.GENERALIZEDTIME],\n                            capture: 'certValidityNotBefore',\n                        }, {\n                            name: 'Certificate.TBSCertificate.validity.notAfter',\n                            class: ASN.Class.UNIVERSAL,\n                            tag: [ASN.Tag.UTCTIME, ASN.Tag.GENERALIZEDTIME],\n                            capture: 'certValidityNotAfter',\n                        }],\n                }, {\n                    // Name (subject) (RDNSequence)\n                    name: 'Certificate.TBSCertificate.subject',\n                    class: ASN.Class.UNIVERSAL,\n                    tag: ASN.Tag.SEQUENCE,\n                    capture: 'certSubject',\n                },\n                // SubjectPublicKeyInfo\n                PublicKeyValidator,\n                {\n                    // issuerUniqueID (optional)\n                    name: 'Certificate.TBSCertificate.issuerUniqueID',\n                    class: ASN.Class.CONTEXT_SPECIFIC,\n                    tag: ASN.Tag.BOOLEAN,\n                    optional: true,\n                    value: [{\n                            name: 'Certificate.TBSCertificate.issuerUniqueID.id',\n                            class: ASN.Class.UNIVERSAL,\n                            tag: ASN.Tag.BITSTRING,\n                            capture: 'certIssuerUniqueId',\n                        }],\n                }, {\n                    // subjectUniqueID (optional)\n                    name: 'Certificate.TBSCertificate.subjectUniqueID',\n                    class: ASN.Class.CONTEXT_SPECIFIC,\n                    tag: ASN.Tag.INTEGER,\n                    optional: true,\n                    value: [{\n                            name: 'Certificate.TBSCertificate.subjectUniqueID.id',\n                            class: ASN.Class.UNIVERSAL,\n                            tag: ASN.Tag.BITSTRING,\n                            capture: 'certSubjectUniqueId',\n                        }],\n                }, {\n                    // Extensions (optional)\n                    name: 'Certificate.TBSCertificate.extensions',\n                    class: ASN.Class.CONTEXT_SPECIFIC,\n                    tag: ASN.Tag.BITSTRING,\n                    capture: 'certExtensions',\n                    optional: true,\n                }],\n        }, {\n            // AlgorithmIdentifier (signature algorithm)\n            name: 'Certificate.signatureAlgorithm',\n            class: ASN.Class.UNIVERSAL,\n            tag: ASN.Tag.SEQUENCE,\n            value: [{\n                    // algorithm\n                    name: 'Certificate.signatureAlgorithm.algorithm',\n                    class: ASN.Class.UNIVERSAL,\n                    tag: ASN.Tag.OID,\n                    capture: 'certSignatureOID',\n                }, {\n                    name: 'Certificate.TBSCertificate.signature.parameters',\n                    class: ASN.Class.UNIVERSAL,\n                    tag: ASN.Tag.OCTETSTRING,\n                    optional: true,\n                    capture: 'certSignatureParams',\n                }],\n        }, {\n            name: 'Certificate.signatureValue',\n            class: ASN.Class.UNIVERSAL,\n            tag: ASN.Tag.BITSTRING,\n            capture: 'certSignature',\n        }],\n};\n\nexport function getDERFromPEM(pem) {\n  return ASN.PEM.parse(pem)[0].body;\n}\n\nfunction toBase64URL(buffer) {\n    return buffer.toString('base64').replace(/=/g, \"\").replace(/\\+/g, \"-\").replace(/\\//g, \"_\")\n}\n\nexport function getJWTFromPEM(pem) {\n  const obj = ASN.ASN1.fromDER(getDERFromPEM(pem), true);\n\n  let publicKey = { oid: undefined, keyRaw: undefined};\n  if (pem.includes(\"CERTIFICATE\")) {\n    const certCaptures = {};\n    obj.validate(x509CertificateValidator, certCaptures);\n\n    const publicKeyCaptures = {};\n    certCaptures.publicKeyInfo.validate(PublicKeyValidator, publicKeyCaptures);\n\n    publicKey.oid = ASN.ASN1.parseOID(publicKeyCaptures.publicKeyOID.bytes)\n    publicKey.keyRaw = ASN.ASN1.parseBitString(publicKeyCaptures.publicKey.bytes).buf;\n  } else {\n    const captures = {};\n    obj.validate(PublicKeyValidator, captures);\n    \n    publicKey.oid = ASN.ASN1.parseOID(captures.publicKeyOID.bytes)\n    publicKey.keyRaw = ASN.ASN1.parseBitString(captures.publicKey.bytes).buf;\n  }\n\n  // if RSA\n  // Find better ways to parse key parameters. \n  if (publicKey.oid === RSA_IOD) {\n    let pk = publicKey.keyRaw\n    const keyMod = toBase64URL(pk.slice(9, pk.length - 5));\n    const keyExp = toBase64URL(pk.slice(pk.length - 3,pk.length));\n    return {alg: 'PS256', kid: undefined, n: keyMod, e: keyExp};\n  } else {\n    let pk = publicKey.keyRaw\n    const keyX = toBase64URL(pk.slice(1, 1+32));\n    const keyY = toBase64URL(pk.slice(33,33+32));\n    return {alg: 'ES256', kid: undefined, x: keyX, y: keyY};\n  }\n}"]},"metadata":{},"sourceType":"module"}