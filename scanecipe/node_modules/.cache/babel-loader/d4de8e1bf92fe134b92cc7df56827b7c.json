{"ast":null,"code":"'use strict';\n\nfunction required(str, fieldName) {\n  if (str.trim().length === 0) error(`${fieldName} is required`);\n  return str;\n}\nfunction validSlog(str) {\n  if (str !== 'UPNQR') error('Invalid code');\n  return str;\n}\nfunction validIBAN(str) {\n  if (str.length > 19) error('Invalid IBAN');\n  return str;\n}\nconst kodaNamenaRE = /^[A-Z]{4}$/;\nfunction validKodaNamena(str, fieldName) {\n  if (!kodaNamenaRE.test(str)) error(`Invalid ${fieldName}`);\n  return str;\n}\nfunction parseDate(str) {\n  if (!str) return str;\n  if (str.length !== 10) error(`Invalid date length ${str}`);\n  const parts = str.split('.');\n  if (parts.length !== 3) error('Invalid date format');\n  const d = new Date();\n  d.setTime(0);\n  d.setDate(num(parts[0]));\n  d.setMonth(num(parts[1]) - 1);\n  d.setFullYear(num(parts[2]));\n  return d;\n}\nfunction parseBool(str, fieldName) {\n  if (str !== '' && str !== 'X') error(`Invalid bool \"${str}\" for ${fieldName}`);\n  return str === 'X';\n}\nfunction parseAmount(str) {\n  const n = num(str);\n  if (Number.isNaN(n)) error(`Invalid amount ${str}`);\n  return n / 100;\n}\nfunction formatDate(date) {\n  if (!(date instanceof Date)) error('Invalid date object');\n  return `${pad(date.getDate() + '')}.${pad(date.getMonth() + 1 + '')}.${date.getFullYear()}`;\n}\nfunction formatBool(bool) {\n  return bool ? 'X' : '';\n}\nfunction formatAmount(amount) {\n  return pad(Math.floor(amount * 100).toString(), 11);\n}\nconst validLength = memoize(function (length) {\n  return function (str, fieldName) {\n    if (str.length > length) error(`Invalid length. ${fieldName} max len is ${length}, got ${str.length}`);\n    return str;\n  };\n});\nfunction error(msg) {\n  throw new (require('./upnqr').UPNQRError)(msg);\n}\nfunction num(str) {\n  return parseInt(str, 10);\n}\nfunction pad(str, n = 2) {\n  while (str.length < n) str = '0' + str;\n  return str;\n}\nfunction memoize(fn) {\n  return function () {\n    let hash = '';\n    let i = arguments.length;\n    while (i--) {\n      const currentArg = arguments[i];\n      hash += currentArg === Object(currentArg) ? JSON.stringify(currentArg) : currentArg;\n    }\n    if (!fn.memoize) fn.memoize = {};\n    return hash in fn.memoize ? fn.memoize[hash] : fn.memoize[hash] = fn.apply(this, arguments);\n  };\n}\nmodule.exports = {\n  required,\n  validSlog,\n  validIBAN,\n  validLength,\n  validKodaNamena,\n  parseDate,\n  parseBool,\n  parseAmount,\n  formatDate,\n  formatBool,\n  formatAmount\n};","map":{"version":3,"names":["required","str","fieldName","trim","length","error","validSlog","validIBAN","kodaNamenaRE","validKodaNamena","test","parseDate","parts","split","d","Date","setTime","setDate","num","setMonth","setFullYear","parseBool","parseAmount","n","Number","isNaN","formatDate","date","pad","getDate","getMonth","getFullYear","formatBool","bool","formatAmount","amount","Math","floor","toString","validLength","memoize","msg","require","UPNQRError","parseInt","fn","hash","i","arguments","currentArg","Object","JSON","stringify","apply","module","exports"],"sources":["/Users/jakechoi/Documents/StormhacksFall2024/stormhacks-2024/scanecipe/node_modules/upnqr/lib/util.js"],"sourcesContent":["'use strict'\n\nfunction required (str, fieldName) {\n  if (str.trim().length === 0) error(`${fieldName} is required`)\n  return str\n}\n\nfunction validSlog (str) {\n  if (str !== 'UPNQR') error('Invalid code')\n  return str\n}\n\nfunction validIBAN (str) {\n  if (str.length > 19) error('Invalid IBAN')\n  return str\n}\n\nconst kodaNamenaRE = /^[A-Z]{4}$/\nfunction validKodaNamena (str, fieldName) {\n  if (!kodaNamenaRE.test(str)) error(`Invalid ${fieldName}`)\n  return str\n}\n\nfunction parseDate (str) {\n  if (!str) return str\n  if (str.length !== 10) error(`Invalid date length ${str}`)\n  const parts = str.split('.')\n  if (parts.length !== 3) error('Invalid date format')\n  const d = new Date()\n  d.setTime(0)\n  d.setDate(num(parts[0]))\n  d.setMonth(num(parts[1]) - 1)\n  d.setFullYear(num(parts[2]))\n  return d\n}\n\nfunction parseBool (str, fieldName) {\n  if (str !== '' && str !== 'X') error(`Invalid bool \"${str}\" for ${fieldName}`)\n  return str === 'X'\n}\n\nfunction parseAmount (str) {\n  const n = num(str)\n  if (Number.isNaN(n)) error(`Invalid amount ${str}`)\n  return n / 100\n}\n\nfunction formatDate (date) {\n  if (!(date instanceof Date)) error('Invalid date object')\n  return `${pad(date.getDate() + '')}.${pad(date.getMonth() + 1 + '')}.${date.getFullYear()}`\n}\n\nfunction formatBool (bool) {\n  return bool ? 'X' : ''\n}\n\nfunction formatAmount (amount) {\n  return pad(Math.floor(amount * 100).toString(), 11)\n}\n\nconst validLength = memoize(function (length) {\n  return function (str, fieldName) {\n    if (str.length > length) error(`Invalid length. ${fieldName} max len is ${length}, got ${str.length}`)\n    return str\n  }\n})\n\nfunction error (msg) {\n  throw new (require('./upnqr').UPNQRError)(msg)\n}\n\nfunction num (str) {\n  return parseInt(str, 10)\n}\n\nfunction pad (str, n = 2) {\n  while (str.length < n) str = '0' + str\n  return str\n}\n\nfunction memoize (fn) {\n  return function () {\n    let hash = ''\n    let i = arguments.length\n    while (i--) {\n      const currentArg = arguments[i]\n      hash += currentArg === Object(currentArg) ? JSON.stringify(currentArg) : currentArg\n    }\n    if (!fn.memoize) fn.memoize = {}\n    return hash in fn.memoize ? fn.memoize[hash] : (fn.memoize[hash] = fn.apply(this, arguments))\n  }\n}\n\nmodule.exports = {\n  required,\n  validSlog,\n  validIBAN,\n  validLength,\n  validKodaNamena,\n  parseDate,\n  parseBool,\n  parseAmount,\n  formatDate,\n  formatBool,\n  formatAmount\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,SAASA,QAAQA,CAAEC,GAAG,EAAEC,SAAS,EAAE;EACjC,IAAID,GAAG,CAACE,IAAI,CAAC,CAAC,CAACC,MAAM,KAAK,CAAC,EAAEC,KAAK,CAAC,GAAGH,SAAS,cAAc,CAAC;EAC9D,OAAOD,GAAG;AACZ;AAEA,SAASK,SAASA,CAAEL,GAAG,EAAE;EACvB,IAAIA,GAAG,KAAK,OAAO,EAAEI,KAAK,CAAC,cAAc,CAAC;EAC1C,OAAOJ,GAAG;AACZ;AAEA,SAASM,SAASA,CAAEN,GAAG,EAAE;EACvB,IAAIA,GAAG,CAACG,MAAM,GAAG,EAAE,EAAEC,KAAK,CAAC,cAAc,CAAC;EAC1C,OAAOJ,GAAG;AACZ;AAEA,MAAMO,YAAY,GAAG,YAAY;AACjC,SAASC,eAAeA,CAAER,GAAG,EAAEC,SAAS,EAAE;EACxC,IAAI,CAACM,YAAY,CAACE,IAAI,CAACT,GAAG,CAAC,EAAEI,KAAK,CAAC,WAAWH,SAAS,EAAE,CAAC;EAC1D,OAAOD,GAAG;AACZ;AAEA,SAASU,SAASA,CAAEV,GAAG,EAAE;EACvB,IAAI,CAACA,GAAG,EAAE,OAAOA,GAAG;EACpB,IAAIA,GAAG,CAACG,MAAM,KAAK,EAAE,EAAEC,KAAK,CAAC,uBAAuBJ,GAAG,EAAE,CAAC;EAC1D,MAAMW,KAAK,GAAGX,GAAG,CAACY,KAAK,CAAC,GAAG,CAAC;EAC5B,IAAID,KAAK,CAACR,MAAM,KAAK,CAAC,EAAEC,KAAK,CAAC,qBAAqB,CAAC;EACpD,MAAMS,CAAC,GAAG,IAAIC,IAAI,CAAC,CAAC;EACpBD,CAAC,CAACE,OAAO,CAAC,CAAC,CAAC;EACZF,CAAC,CAACG,OAAO,CAACC,GAAG,CAACN,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;EACxBE,CAAC,CAACK,QAAQ,CAACD,GAAG,CAACN,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EAC7BE,CAAC,CAACM,WAAW,CAACF,GAAG,CAACN,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;EAC5B,OAAOE,CAAC;AACV;AAEA,SAASO,SAASA,CAAEpB,GAAG,EAAEC,SAAS,EAAE;EAClC,IAAID,GAAG,KAAK,EAAE,IAAIA,GAAG,KAAK,GAAG,EAAEI,KAAK,CAAC,iBAAiBJ,GAAG,SAASC,SAAS,EAAE,CAAC;EAC9E,OAAOD,GAAG,KAAK,GAAG;AACpB;AAEA,SAASqB,WAAWA,CAAErB,GAAG,EAAE;EACzB,MAAMsB,CAAC,GAAGL,GAAG,CAACjB,GAAG,CAAC;EAClB,IAAIuB,MAAM,CAACC,KAAK,CAACF,CAAC,CAAC,EAAElB,KAAK,CAAC,kBAAkBJ,GAAG,EAAE,CAAC;EACnD,OAAOsB,CAAC,GAAG,GAAG;AAChB;AAEA,SAASG,UAAUA,CAAEC,IAAI,EAAE;EACzB,IAAI,EAAEA,IAAI,YAAYZ,IAAI,CAAC,EAAEV,KAAK,CAAC,qBAAqB,CAAC;EACzD,OAAO,GAAGuB,GAAG,CAACD,IAAI,CAACE,OAAO,CAAC,CAAC,GAAG,EAAE,CAAC,IAAID,GAAG,CAACD,IAAI,CAACG,QAAQ,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,IAAIH,IAAI,CAACI,WAAW,CAAC,CAAC,EAAE;AAC7F;AAEA,SAASC,UAAUA,CAAEC,IAAI,EAAE;EACzB,OAAOA,IAAI,GAAG,GAAG,GAAG,EAAE;AACxB;AAEA,SAASC,YAAYA,CAAEC,MAAM,EAAE;EAC7B,OAAOP,GAAG,CAACQ,IAAI,CAACC,KAAK,CAACF,MAAM,GAAG,GAAG,CAAC,CAACG,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC;AACrD;AAEA,MAAMC,WAAW,GAAGC,OAAO,CAAC,UAAUpC,MAAM,EAAE;EAC5C,OAAO,UAAUH,GAAG,EAAEC,SAAS,EAAE;IAC/B,IAAID,GAAG,CAACG,MAAM,GAAGA,MAAM,EAAEC,KAAK,CAAC,mBAAmBH,SAAS,eAAeE,MAAM,SAASH,GAAG,CAACG,MAAM,EAAE,CAAC;IACtG,OAAOH,GAAG;EACZ,CAAC;AACH,CAAC,CAAC;AAEF,SAASI,KAAKA,CAAEoC,GAAG,EAAE;EACnB,MAAM,KAAKC,OAAO,CAAC,SAAS,CAAC,CAACC,UAAU,EAAEF,GAAG,CAAC;AAChD;AAEA,SAASvB,GAAGA,CAAEjB,GAAG,EAAE;EACjB,OAAO2C,QAAQ,CAAC3C,GAAG,EAAE,EAAE,CAAC;AAC1B;AAEA,SAAS2B,GAAGA,CAAE3B,GAAG,EAAEsB,CAAC,GAAG,CAAC,EAAE;EACxB,OAAOtB,GAAG,CAACG,MAAM,GAAGmB,CAAC,EAAEtB,GAAG,GAAG,GAAG,GAAGA,GAAG;EACtC,OAAOA,GAAG;AACZ;AAEA,SAASuC,OAAOA,CAAEK,EAAE,EAAE;EACpB,OAAO,YAAY;IACjB,IAAIC,IAAI,GAAG,EAAE;IACb,IAAIC,CAAC,GAAGC,SAAS,CAAC5C,MAAM;IACxB,OAAO2C,CAAC,EAAE,EAAE;MACV,MAAME,UAAU,GAAGD,SAAS,CAACD,CAAC,CAAC;MAC/BD,IAAI,IAAIG,UAAU,KAAKC,MAAM,CAACD,UAAU,CAAC,GAAGE,IAAI,CAACC,SAAS,CAACH,UAAU,CAAC,GAAGA,UAAU;IACrF;IACA,IAAI,CAACJ,EAAE,CAACL,OAAO,EAAEK,EAAE,CAACL,OAAO,GAAG,CAAC,CAAC;IAChC,OAAOM,IAAI,IAAID,EAAE,CAACL,OAAO,GAAGK,EAAE,CAACL,OAAO,CAACM,IAAI,CAAC,GAAID,EAAE,CAACL,OAAO,CAACM,IAAI,CAAC,GAAGD,EAAE,CAACQ,KAAK,CAAC,IAAI,EAAEL,SAAS,CAAE;EAC/F,CAAC;AACH;AAEAM,MAAM,CAACC,OAAO,GAAG;EACfvD,QAAQ;EACRM,SAAS;EACTC,SAAS;EACTgC,WAAW;EACX9B,eAAe;EACfE,SAAS;EACTU,SAAS;EACTC,WAAW;EACXI,UAAU;EACVM,UAAU;EACVE;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script"}