{"ast":null,"code":"'use strict';\n\nexports.Commented = require('./commented');\nexports.Diagnose = require('./diagnose');\nexports.Decoder = require('./decoder');\nexports.Encoder = require('./encoder');\nexports.Simple = require('./simple');\nexports.Tagged = require('./tagged');\nexports.Map = require('./map');\n/**\n * Convenience name for {@linkcode Commented.comment}.\n */\n\nexports.comment = exports.Commented.comment;\n/**\n * Convenience name for {@linkcode Decoder.decodeAll}.\n */\n\nexports.decodeAll = exports.Decoder.decodeAll;\n/**\n * Convenience name for {@linkcode Decoder.decodeFirst}.\n */\n\nexports.decodeFirst = exports.Decoder.decodeFirst;\n/**\n * Convenience name for {@linkcode Decoder.decodeAllSync}.\n */\n\nexports.decodeAllSync = exports.Decoder.decodeAllSync;\n/**\n * Convenience name for {@linkcode Decoder.decodeFirstSync}.\n */\n\nexports.decodeFirstSync = exports.Decoder.decodeFirstSync;\n/**\n * Convenience name for {@linkcode Diagnose.diagnose}.\n */\n\nexports.diagnose = exports.Diagnose.diagnose;\n/**\n * Convenience name for {@linkcode Encoder.encode}.\n */\n\nexports.encode = exports.Encoder.encode;\n/**\n * Convenience name for {@linkcode Encoder.encodeCanonical}.\n */\n\nexports.encodeCanonical = exports.Encoder.encodeCanonical;\n/**\n * Convenience name for {@linkcode Encoder.encodeOne}.\n */\n\nexports.encodeOne = exports.Encoder.encodeOne;\n/**\n * Convenience name for {@linkcode Encoder.encodeAsync}.\n */\n\nexports.encodeAsync = exports.Encoder.encodeAsync;\n/**\n * Convenience name for {@linkcode Decoder.decodeFirstSync}.\n */\n\nexports.decode = exports.Decoder.decodeFirstSync;\n/**\n * The codec information for\n * {@link https://github.com/Level/encoding-down encoding-down}, which is a\n * codec framework for leveldb.  CBOR is a particularly convenient format for\n * both keys and values, as it can deal with a lot of types that JSON can't\n * handle without losing type information.\n *\n * @example\n * const level = require('level')\n * const cbor = require('cbor')\n *\n * async function putget() {\n *   const db = level('./db', {\n *     keyEncoding: cbor.leveldb,\n *     valueEncoding: cbor.leveldb,\n *   })\n *\n *   await db.put({a: 1}, 9857298342094820394820394820398234092834n)\n *   const val = await db.get({a: 1})\n * }\n */\n\nexports.leveldb = {\n  decode: exports.Decoder.decodeFirstSync,\n  encode: exports.Encoder.encode,\n  buffer: true,\n  name: 'cbor'\n};\n/**\n * Reset everything that we can predict a plugin might have altered in good\n * faith.  For now that includes the default set of tags that decoding and\n * encoding will use.\n */\n\nexports.reset = function reset() {\n  exports.Encoder.reset();\n  exports.Tagged.reset();\n};","map":{"version":3,"sources":["/Users/jakechoi/Documents/StormhacksFall2024/stormhacks-2024/scanecipe/node_modules/cbor/lib/cbor.js"],"names":["exports","Commented","require","Diagnose","Decoder","Encoder","Simple","Tagged","Map","comment","decodeAll","decodeFirst","decodeAllSync","decodeFirstSync","diagnose","encode","encodeCanonical","encodeOne","encodeAsync","decode","leveldb","buffer","name","reset"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,SAAR,GAAoBC,OAAO,CAAC,aAAD,CAA3B;AACAF,OAAO,CAACG,QAAR,GAAmBD,OAAO,CAAC,YAAD,CAA1B;AACAF,OAAO,CAACI,OAAR,GAAkBF,OAAO,CAAC,WAAD,CAAzB;AACAF,OAAO,CAACK,OAAR,GAAkBH,OAAO,CAAC,WAAD,CAAzB;AACAF,OAAO,CAACM,MAAR,GAAiBJ,OAAO,CAAC,UAAD,CAAxB;AACAF,OAAO,CAACO,MAAR,GAAiBL,OAAO,CAAC,UAAD,CAAxB;AACAF,OAAO,CAACQ,GAAR,GAAcN,OAAO,CAAC,OAAD,CAArB;AAEA;AACA;AACA;;AACAF,OAAO,CAACS,OAAR,GAAkBT,OAAO,CAACC,SAAR,CAAkBQ,OAApC;AAEA;AACA;AACA;;AACAT,OAAO,CAACU,SAAR,GAAoBV,OAAO,CAACI,OAAR,CAAgBM,SAApC;AAEA;AACA;AACA;;AACAV,OAAO,CAACW,WAAR,GAAsBX,OAAO,CAACI,OAAR,CAAgBO,WAAtC;AAEA;AACA;AACA;;AACAX,OAAO,CAACY,aAAR,GAAwBZ,OAAO,CAACI,OAAR,CAAgBQ,aAAxC;AAEA;AACA;AACA;;AACAZ,OAAO,CAACa,eAAR,GAA0Bb,OAAO,CAACI,OAAR,CAAgBS,eAA1C;AAEA;AACA;AACA;;AACAb,OAAO,CAACc,QAAR,GAAmBd,OAAO,CAACG,QAAR,CAAiBW,QAApC;AAEA;AACA;AACA;;AACAd,OAAO,CAACe,MAAR,GAAiBf,OAAO,CAACK,OAAR,CAAgBU,MAAjC;AAEA;AACA;AACA;;AACAf,OAAO,CAACgB,eAAR,GAA0BhB,OAAO,CAACK,OAAR,CAAgBW,eAA1C;AAEA;AACA;AACA;;AACAhB,OAAO,CAACiB,SAAR,GAAoBjB,OAAO,CAACK,OAAR,CAAgBY,SAApC;AAEA;AACA;AACA;;AACAjB,OAAO,CAACkB,WAAR,GAAsBlB,OAAO,CAACK,OAAR,CAAgBa,WAAtC;AAEA;AACA;AACA;;AACAlB,OAAO,CAACmB,MAAR,GAAiBnB,OAAO,CAACI,OAAR,CAAgBS,eAAjC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAb,OAAO,CAACoB,OAAR,GAAkB;AAChBD,EAAAA,MAAM,EAAEnB,OAAO,CAACI,OAAR,CAAgBS,eADR;AAEhBE,EAAAA,MAAM,EAAEf,OAAO,CAACK,OAAR,CAAgBU,MAFR;AAGhBM,EAAAA,MAAM,EAAE,IAHQ;AAIhBC,EAAAA,IAAI,EAAE;AAJU,CAAlB;AAOA;AACA;AACA;AACA;AACA;;AACAtB,OAAO,CAACuB,KAAR,GAAgB,SAASA,KAAT,GAAiB;AAC/BvB,EAAAA,OAAO,CAACK,OAAR,CAAgBkB,KAAhB;AACAvB,EAAAA,OAAO,CAACO,MAAR,CAAegB,KAAf;AACD,CAHD","sourcesContent":["'use strict'\n\nexports.Commented = require('./commented')\nexports.Diagnose = require('./diagnose')\nexports.Decoder = require('./decoder')\nexports.Encoder = require('./encoder')\nexports.Simple = require('./simple')\nexports.Tagged = require('./tagged')\nexports.Map = require('./map')\n\n/**\n * Convenience name for {@linkcode Commented.comment}.\n */\nexports.comment = exports.Commented.comment\n\n/**\n * Convenience name for {@linkcode Decoder.decodeAll}.\n */\nexports.decodeAll = exports.Decoder.decodeAll\n\n/**\n * Convenience name for {@linkcode Decoder.decodeFirst}.\n */\nexports.decodeFirst = exports.Decoder.decodeFirst\n\n/**\n * Convenience name for {@linkcode Decoder.decodeAllSync}.\n */\nexports.decodeAllSync = exports.Decoder.decodeAllSync\n\n/**\n * Convenience name for {@linkcode Decoder.decodeFirstSync}.\n */\nexports.decodeFirstSync = exports.Decoder.decodeFirstSync\n\n/**\n * Convenience name for {@linkcode Diagnose.diagnose}.\n */\nexports.diagnose = exports.Diagnose.diagnose\n\n/**\n * Convenience name for {@linkcode Encoder.encode}.\n */\nexports.encode = exports.Encoder.encode\n\n/**\n * Convenience name for {@linkcode Encoder.encodeCanonical}.\n */\nexports.encodeCanonical = exports.Encoder.encodeCanonical\n\n/**\n * Convenience name for {@linkcode Encoder.encodeOne}.\n */\nexports.encodeOne = exports.Encoder.encodeOne\n\n/**\n * Convenience name for {@linkcode Encoder.encodeAsync}.\n */\nexports.encodeAsync = exports.Encoder.encodeAsync\n\n/**\n * Convenience name for {@linkcode Decoder.decodeFirstSync}.\n */\nexports.decode = exports.Decoder.decodeFirstSync\n\n/**\n * The codec information for\n * {@link https://github.com/Level/encoding-down encoding-down}, which is a\n * codec framework for leveldb.  CBOR is a particularly convenient format for\n * both keys and values, as it can deal with a lot of types that JSON can't\n * handle without losing type information.\n *\n * @example\n * const level = require('level')\n * const cbor = require('cbor')\n *\n * async function putget() {\n *   const db = level('./db', {\n *     keyEncoding: cbor.leveldb,\n *     valueEncoding: cbor.leveldb,\n *   })\n *\n *   await db.put({a: 1}, 9857298342094820394820394820398234092834n)\n *   const val = await db.get({a: 1})\n * }\n */\nexports.leveldb = {\n  decode: exports.Decoder.decodeFirstSync,\n  encode: exports.Encoder.encode,\n  buffer: true,\n  name: 'cbor',\n}\n\n/**\n * Reset everything that we can predict a plugin might have altered in good\n * faith.  For now that includes the default set of tags that decoding and\n * encoding will use.\n */\nexports.reset = function reset() {\n  exports.Encoder.reset()\n  exports.Tagged.reset()\n}\n"]},"metadata":{},"sourceType":"script"}