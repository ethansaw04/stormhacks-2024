{"ast":null,"code":"const charset = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:';\n\nconst divmod = (x, y) => [Math.floor(x / y), x % y]; // Encode a buffer (or uint8array) to base45-encoded string\n\n\nconst encode = buffer => {\n  if (typeof buffer === 'string') buffer = Buffer.from(buffer);\n  let res = '';\n\n  for (let i = 0; i < buffer.length; i = i + 2) {\n    if (buffer.length - i > 1) {\n      const x = (buffer[i] << 8) + buffer[i + 1];\n      const [e, rest] = divmod(x, 45 * 45);\n      const [d, c] = divmod(rest, 45);\n      res += charset[c] + charset[d] + charset[e];\n    } else {\n      const [d, c] = divmod(buffer[i], 45);\n      res += charset[c] + charset[d];\n    }\n  }\n\n  return res;\n}; // Decode base45-encoded input\n\n\nconst decode = input => {\n  const buffer = Array.from(input).map(c => charset.indexOf(c));\n  const res = [];\n\n  for (let i = 0; i < buffer.length; i = i + 3) {\n    if (buffer.length - i >= 3) {\n      const x = buffer[i] + buffer[i + 1] * 45 + buffer[i + 2] * 45 * 45;\n      res.push(...divmod(x, 256));\n    } else {\n      const x = buffer[i] + buffer[i + 1] * 45;\n      res.push(x);\n    }\n  }\n\n  return Buffer.from(res);\n};\n\nmodule.exports = {\n  encode,\n  decode\n};","map":{"version":3,"sources":["/Users/jakechoi/Documents/StormhacksFall2024/stormhacks-2024/scanecipe/node_modules/base45/lib/base45.js"],"names":["charset","divmod","x","y","Math","floor","encode","buffer","Buffer","from","res","i","length","e","rest","d","c","decode","input","Array","map","indexOf","push","module","exports"],"mappings":"AAAA,MAAMA,OAAO,GAAG,+CAAhB;;AACA,MAAMC,MAAM,GAAG,CAACC,CAAD,EAAIC,CAAJ,KAAU,CAACC,IAAI,CAACC,KAAL,CAAWH,CAAC,GAAGC,CAAf,CAAD,EAAoBD,CAAC,GAAGC,CAAxB,CAAzB,C,CAEA;;;AACA,MAAMG,MAAM,GAAIC,MAAD,IAAY;AACzB,MAAI,OAAQA,MAAR,KAAoB,QAAxB,EAAkCA,MAAM,GAAGC,MAAM,CAACC,IAAP,CAAYF,MAAZ,CAAT;AAClC,MAAIG,GAAG,GAAG,EAAV;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,MAAM,CAACK,MAA3B,EAAmCD,CAAC,GAAGA,CAAC,GAAG,CAA3C,EAA8C;AAC5C,QAAIJ,MAAM,CAACK,MAAP,GAAgBD,CAAhB,GAAoB,CAAxB,EAA2B;AACzB,YAAMT,CAAC,GAAG,CAACK,MAAM,CAACI,CAAD,CAAN,IAAa,CAAd,IAAmBJ,MAAM,CAACI,CAAC,GAAG,CAAL,CAAnC;AACA,YAAM,CAACE,CAAD,EAAIC,IAAJ,IAAYb,MAAM,CAACC,CAAD,EAAI,KAAK,EAAT,CAAxB;AACA,YAAM,CAACa,CAAD,EAAIC,CAAJ,IAASf,MAAM,CAACa,IAAD,EAAO,EAAP,CAArB;AACAJ,MAAAA,GAAG,IAAIV,OAAO,CAACgB,CAAD,CAAP,GAAahB,OAAO,CAACe,CAAD,CAApB,GAA0Bf,OAAO,CAACa,CAAD,CAAxC;AACD,KALD,MAKO;AACL,YAAM,CAACE,CAAD,EAAIC,CAAJ,IAASf,MAAM,CAACM,MAAM,CAACI,CAAD,CAAP,EAAY,EAAZ,CAArB;AACAD,MAAAA,GAAG,IAAIV,OAAO,CAACgB,CAAD,CAAP,GAAahB,OAAO,CAACe,CAAD,CAA3B;AACD;AACF;;AACD,SAAOL,GAAP;AACD,CAfD,C,CAiBA;;;AACA,MAAMO,MAAM,GAAIC,KAAD,IAAW;AACxB,QAAMX,MAAM,GAAGY,KAAK,CAACV,IAAN,CAAWS,KAAX,EAAkBE,GAAlB,CAAsBJ,CAAC,IAAIhB,OAAO,CAACqB,OAAR,CAAgBL,CAAhB,CAA3B,CAAf;AACA,QAAMN,GAAG,GAAG,EAAZ;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,MAAM,CAACK,MAA3B,EAAmCD,CAAC,GAAGA,CAAC,GAAG,CAA3C,EAA8C;AAC5C,QAAIJ,MAAM,CAACK,MAAP,GAAgBD,CAAhB,IAAqB,CAAzB,EAA4B;AAC1B,YAAMT,CAAC,GAAGK,MAAM,CAACI,CAAD,CAAN,GAAYJ,MAAM,CAACI,CAAC,GAAG,CAAL,CAAN,GAAgB,EAA5B,GAAiCJ,MAAM,CAACI,CAAC,GAAG,CAAL,CAAN,GAAgB,EAAhB,GAAqB,EAAhE;AACAD,MAAAA,GAAG,CAACY,IAAJ,CAAS,GAAGrB,MAAM,CAACC,CAAD,EAAI,GAAJ,CAAlB;AACD,KAHD,MAGO;AACL,YAAMA,CAAC,GAAGK,MAAM,CAACI,CAAD,CAAN,GAAYJ,MAAM,CAACI,CAAC,GAAG,CAAL,CAAN,GAAgB,EAAtC;AACAD,MAAAA,GAAG,CAACY,IAAJ,CAASpB,CAAT;AACD;AACF;;AACD,SAAOM,MAAM,CAACC,IAAP,CAAYC,GAAZ,CAAP;AACD,CAbD;;AAeAa,MAAM,CAACC,OAAP,GAAiB;AACflB,EAAAA,MADe;AAEfW,EAAAA;AAFe,CAAjB","sourcesContent":["const charset = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:'\nconst divmod = (x, y) => [Math.floor(x / y), x % y]\n\n// Encode a buffer (or uint8array) to base45-encoded string\nconst encode = (buffer) => {\n  if (typeof (buffer) === 'string') buffer = Buffer.from(buffer)\n  let res = ''\n  for (let i = 0; i < buffer.length; i = i + 2) {\n    if (buffer.length - i > 1) {\n      const x = (buffer[i] << 8) + buffer[i + 1]\n      const [e, rest] = divmod(x, 45 * 45)\n      const [d, c] = divmod(rest, 45)\n      res += charset[c] + charset[d] + charset[e]\n    } else {\n      const [d, c] = divmod(buffer[i], 45)\n      res += charset[c] + charset[d]\n    }\n  }\n  return res\n}\n\n// Decode base45-encoded input\nconst decode = (input) => {\n  const buffer = Array.from(input).map(c => charset.indexOf(c))\n  const res = []\n  for (let i = 0; i < buffer.length; i = i + 3) {\n    if (buffer.length - i >= 3) {\n      const x = buffer[i] + buffer[i + 1] * 45 + buffer[i + 2] * 45 * 45\n      res.push(...divmod(x, 256))\n    } else {\n      const x = buffer[i] + buffer[i + 1] * 45\n      res.push(x)\n    }\n  }\n  return Buffer.from(res)\n}\n\nmodule.exports = {\n  encode,\n  decode\n}\n"]},"metadata":{},"sourceType":"script"}