{"ast":null,"code":"import * as ASN from '@fidm/asn1';\nconst RSA_IOD = \"1.2.840.113549.1.1.1\";\n\n/**\n * ASN.1 Template for PKCS#8 Public Key.\n */\nconst PublicKeyValidator = {\n  name: 'PublicKeyInfo',\n  class: ASN.Class.UNIVERSAL,\n  tag: ASN.Tag.SEQUENCE,\n  capture: 'publicKeyInfo',\n  value: [{\n    name: 'PublicKeyInfo.AlgorithmIdentifier',\n    class: ASN.Class.UNIVERSAL,\n    tag: ASN.Tag.SEQUENCE,\n    value: [{\n      name: 'PublicKeyAlgorithmIdentifier.algorithm',\n      class: ASN.Class.UNIVERSAL,\n      tag: ASN.Tag.OID,\n      capture: 'publicKeyOID'\n    }]\n  }, {\n    name: 'PublicKeyInfo.PublicKey',\n    class: ASN.Class.UNIVERSAL,\n    tag: ASN.Tag.BITSTRING,\n    capture: 'publicKey'\n  }]\n};\n\n// validator for an X.509v3 certificate\nconst x509CertificateValidator = {\n  name: 'Certificate',\n  class: ASN.Class.UNIVERSAL,\n  tag: ASN.Tag.SEQUENCE,\n  value: [{\n    name: 'Certificate.TBSCertificate',\n    class: ASN.Class.UNIVERSAL,\n    tag: ASN.Tag.SEQUENCE,\n    capture: 'tbsCertificate',\n    value: [{\n      name: 'Certificate.TBSCertificate.version',\n      class: ASN.Class.CONTEXT_SPECIFIC,\n      tag: ASN.Tag.NONE,\n      optional: true,\n      value: [{\n        name: 'Certificate.TBSCertificate.version.integer',\n        class: ASN.Class.UNIVERSAL,\n        tag: ASN.Tag.INTEGER,\n        capture: 'certVersion'\n      }]\n    }, {\n      name: 'Certificate.TBSCertificate.serialNumber',\n      class: ASN.Class.UNIVERSAL,\n      tag: ASN.Tag.INTEGER,\n      capture: 'certSerialNumber'\n    }, {\n      name: 'Certificate.TBSCertificate.signature',\n      class: ASN.Class.UNIVERSAL,\n      tag: ASN.Tag.SEQUENCE,\n      value: [{\n        name: 'Certificate.TBSCertificate.signature.algorithm',\n        class: ASN.Class.UNIVERSAL,\n        tag: ASN.Tag.OID,\n        capture: 'certinfoSignatureOID'\n      }, {\n        name: 'Certificate.TBSCertificate.signature.parameters',\n        class: ASN.Class.UNIVERSAL,\n        tag: ASN.Tag.OCTETSTRING,\n        optional: true,\n        capture: 'certinfoSignatureParams'\n      }]\n    }, {\n      name: 'Certificate.TBSCertificate.issuer',\n      class: ASN.Class.UNIVERSAL,\n      tag: ASN.Tag.SEQUENCE,\n      capture: 'certIssuer'\n    }, {\n      name: 'Certificate.TBSCertificate.validity',\n      class: ASN.Class.UNIVERSAL,\n      tag: ASN.Tag.SEQUENCE,\n      value: [{\n        name: 'Certificate.TBSCertificate.validity.notBefore',\n        class: ASN.Class.UNIVERSAL,\n        tag: [ASN.Tag.UTCTIME, ASN.Tag.GENERALIZEDTIME],\n        capture: 'certValidityNotBefore'\n      }, {\n        name: 'Certificate.TBSCertificate.validity.notAfter',\n        class: ASN.Class.UNIVERSAL,\n        tag: [ASN.Tag.UTCTIME, ASN.Tag.GENERALIZEDTIME],\n        capture: 'certValidityNotAfter'\n      }]\n    }, {\n      // Name (subject) (RDNSequence)\n      name: 'Certificate.TBSCertificate.subject',\n      class: ASN.Class.UNIVERSAL,\n      tag: ASN.Tag.SEQUENCE,\n      capture: 'certSubject'\n    },\n    // SubjectPublicKeyInfo\n    PublicKeyValidator, {\n      // issuerUniqueID (optional)\n      name: 'Certificate.TBSCertificate.issuerUniqueID',\n      class: ASN.Class.CONTEXT_SPECIFIC,\n      tag: ASN.Tag.BOOLEAN,\n      optional: true,\n      value: [{\n        name: 'Certificate.TBSCertificate.issuerUniqueID.id',\n        class: ASN.Class.UNIVERSAL,\n        tag: ASN.Tag.BITSTRING,\n        capture: 'certIssuerUniqueId'\n      }]\n    }, {\n      // subjectUniqueID (optional)\n      name: 'Certificate.TBSCertificate.subjectUniqueID',\n      class: ASN.Class.CONTEXT_SPECIFIC,\n      tag: ASN.Tag.INTEGER,\n      optional: true,\n      value: [{\n        name: 'Certificate.TBSCertificate.subjectUniqueID.id',\n        class: ASN.Class.UNIVERSAL,\n        tag: ASN.Tag.BITSTRING,\n        capture: 'certSubjectUniqueId'\n      }]\n    }, {\n      // Extensions (optional)\n      name: 'Certificate.TBSCertificate.extensions',\n      class: ASN.Class.CONTEXT_SPECIFIC,\n      tag: ASN.Tag.BITSTRING,\n      capture: 'certExtensions',\n      optional: true\n    }]\n  }, {\n    // AlgorithmIdentifier (signature algorithm)\n    name: 'Certificate.signatureAlgorithm',\n    class: ASN.Class.UNIVERSAL,\n    tag: ASN.Tag.SEQUENCE,\n    value: [{\n      // algorithm\n      name: 'Certificate.signatureAlgorithm.algorithm',\n      class: ASN.Class.UNIVERSAL,\n      tag: ASN.Tag.OID,\n      capture: 'certSignatureOID'\n    }, {\n      name: 'Certificate.TBSCertificate.signature.parameters',\n      class: ASN.Class.UNIVERSAL,\n      tag: ASN.Tag.OCTETSTRING,\n      optional: true,\n      capture: 'certSignatureParams'\n    }]\n  }, {\n    name: 'Certificate.signatureValue',\n    class: ASN.Class.UNIVERSAL,\n    tag: ASN.Tag.BITSTRING,\n    capture: 'certSignature'\n  }]\n};\nexport function getDERFromPEM(pem) {\n  return ASN.PEM.parse(pem)[0].body;\n}\nfunction toBase64URL(buffer) {\n  return buffer.toString('base64').replace(/=/g, \"\").replace(/\\+/g, \"-\").replace(/\\//g, \"_\");\n}\nexport function getJWTFromPEM(pem) {\n  const obj = ASN.ASN1.fromDER(getDERFromPEM(pem), true);\n  let publicKey = {\n    oid: undefined,\n    keyRaw: undefined\n  };\n  if (pem.includes(\"CERTIFICATE\")) {\n    const certCaptures = {};\n    obj.validate(x509CertificateValidator, certCaptures);\n    const publicKeyCaptures = {};\n    certCaptures.publicKeyInfo.validate(PublicKeyValidator, publicKeyCaptures);\n    publicKey.oid = ASN.ASN1.parseOID(publicKeyCaptures.publicKeyOID.bytes);\n    publicKey.keyRaw = ASN.ASN1.parseBitString(publicKeyCaptures.publicKey.bytes).buf;\n  } else {\n    const captures = {};\n    obj.validate(PublicKeyValidator, captures);\n    publicKey.oid = ASN.ASN1.parseOID(captures.publicKeyOID.bytes);\n    publicKey.keyRaw = ASN.ASN1.parseBitString(captures.publicKey.bytes).buf;\n  }\n\n  // if RSA\n  // Find better ways to parse key parameters. \n  if (publicKey.oid === RSA_IOD) {\n    let pk = publicKey.keyRaw;\n    const keyMod = toBase64URL(pk.slice(9, pk.length - 5));\n    const keyExp = toBase64URL(pk.slice(pk.length - 3, pk.length));\n    return {\n      alg: 'PS256',\n      kid: undefined,\n      n: keyMod,\n      e: keyExp\n    };\n  } else {\n    let pk = publicKey.keyRaw;\n    const keyX = toBase64URL(pk.slice(1, 1 + 32));\n    const keyY = toBase64URL(pk.slice(33, 33 + 32));\n    return {\n      alg: 'ES256',\n      kid: undefined,\n      x: keyX,\n      y: keyY\n    };\n  }\n}","map":{"version":3,"names":["ASN","RSA_IOD","PublicKeyValidator","name","class","Class","UNIVERSAL","tag","Tag","SEQUENCE","capture","value","OID","BITSTRING","x509CertificateValidator","CONTEXT_SPECIFIC","NONE","optional","INTEGER","OCTETSTRING","UTCTIME","GENERALIZEDTIME","BOOLEAN","getDERFromPEM","pem","PEM","parse","body","toBase64URL","buffer","toString","replace","getJWTFromPEM","obj","ASN1","fromDER","publicKey","oid","undefined","keyRaw","includes","certCaptures","validate","publicKeyCaptures","publicKeyInfo","parseOID","publicKeyOID","bytes","parseBitString","buf","captures","pk","keyMod","slice","length","keyExp","alg","kid","n","e","keyX","keyY","x","y"],"sources":["/Users/jakechoi/Documents/StormhacksFall2024/stormhacks-2024/scanecipe/node_modules/@pathcheck/dcc-sdk/lib/key-parser.js"],"sourcesContent":["import * as ASN from '@fidm/asn1';\n\nconst RSA_IOD = \"1.2.840.113549.1.1.1\";\n\n/**\n * ASN.1 Template for PKCS#8 Public Key.\n */\nconst PublicKeyValidator = {\n    name: 'PublicKeyInfo',\n    class: ASN.Class.UNIVERSAL,\n    tag: ASN.Tag.SEQUENCE,\n    capture: 'publicKeyInfo',\n    value: [{\n            name: 'PublicKeyInfo.AlgorithmIdentifier',\n            class: ASN.Class.UNIVERSAL,\n            tag: ASN.Tag.SEQUENCE,\n            value: [{\n                    name: 'PublicKeyAlgorithmIdentifier.algorithm',\n                    class: ASN.Class.UNIVERSAL,\n                    tag: ASN.Tag.OID,\n                    capture: 'publicKeyOID',\n                }],\n        }, {\n            name: 'PublicKeyInfo.PublicKey',\n            class: ASN.Class.UNIVERSAL,\n            tag: ASN.Tag.BITSTRING,\n            capture: 'publicKey',\n        }],\n};\n\n// validator for an X.509v3 certificate\nconst x509CertificateValidator = {\n    name: 'Certificate',\n    class: ASN.Class.UNIVERSAL,\n    tag: ASN.Tag.SEQUENCE,\n    value: [{\n            name: 'Certificate.TBSCertificate',\n            class: ASN.Class.UNIVERSAL,\n            tag: ASN.Tag.SEQUENCE,\n            capture: 'tbsCertificate',\n            value: [{\n                    name: 'Certificate.TBSCertificate.version',\n                    class: ASN.Class.CONTEXT_SPECIFIC,\n                    tag: ASN.Tag.NONE,\n                    optional: true,\n                    value: [{\n                            name: 'Certificate.TBSCertificate.version.integer',\n                            class: ASN.Class.UNIVERSAL,\n                            tag: ASN.Tag.INTEGER,\n                            capture: 'certVersion',\n                        }],\n                }, {\n                    name: 'Certificate.TBSCertificate.serialNumber',\n                    class: ASN.Class.UNIVERSAL,\n                    tag: ASN.Tag.INTEGER,\n                    capture: 'certSerialNumber',\n                }, {\n                    name: 'Certificate.TBSCertificate.signature',\n                    class: ASN.Class.UNIVERSAL,\n                    tag: ASN.Tag.SEQUENCE,\n                    value: [{\n                            name: 'Certificate.TBSCertificate.signature.algorithm',\n                            class: ASN.Class.UNIVERSAL,\n                            tag: ASN.Tag.OID,\n                            capture: 'certinfoSignatureOID',\n                        }, {\n                            name: 'Certificate.TBSCertificate.signature.parameters',\n                            class: ASN.Class.UNIVERSAL,\n                            tag: ASN.Tag.OCTETSTRING,\n                            optional: true,\n                            capture: 'certinfoSignatureParams',\n                        }],\n                }, {\n                    name: 'Certificate.TBSCertificate.issuer',\n                    class: ASN.Class.UNIVERSAL,\n                    tag: ASN.Tag.SEQUENCE,\n                    capture: 'certIssuer',\n                }, {\n                    name: 'Certificate.TBSCertificate.validity',\n                    class: ASN.Class.UNIVERSAL,\n                    tag: ASN.Tag.SEQUENCE,\n                    value: [{\n                            name: 'Certificate.TBSCertificate.validity.notBefore',\n                            class: ASN.Class.UNIVERSAL,\n                            tag: [ASN.Tag.UTCTIME, ASN.Tag.GENERALIZEDTIME],\n                            capture: 'certValidityNotBefore',\n                        }, {\n                            name: 'Certificate.TBSCertificate.validity.notAfter',\n                            class: ASN.Class.UNIVERSAL,\n                            tag: [ASN.Tag.UTCTIME, ASN.Tag.GENERALIZEDTIME],\n                            capture: 'certValidityNotAfter',\n                        }],\n                }, {\n                    // Name (subject) (RDNSequence)\n                    name: 'Certificate.TBSCertificate.subject',\n                    class: ASN.Class.UNIVERSAL,\n                    tag: ASN.Tag.SEQUENCE,\n                    capture: 'certSubject',\n                },\n                // SubjectPublicKeyInfo\n                PublicKeyValidator,\n                {\n                    // issuerUniqueID (optional)\n                    name: 'Certificate.TBSCertificate.issuerUniqueID',\n                    class: ASN.Class.CONTEXT_SPECIFIC,\n                    tag: ASN.Tag.BOOLEAN,\n                    optional: true,\n                    value: [{\n                            name: 'Certificate.TBSCertificate.issuerUniqueID.id',\n                            class: ASN.Class.UNIVERSAL,\n                            tag: ASN.Tag.BITSTRING,\n                            capture: 'certIssuerUniqueId',\n                        }],\n                }, {\n                    // subjectUniqueID (optional)\n                    name: 'Certificate.TBSCertificate.subjectUniqueID',\n                    class: ASN.Class.CONTEXT_SPECIFIC,\n                    tag: ASN.Tag.INTEGER,\n                    optional: true,\n                    value: [{\n                            name: 'Certificate.TBSCertificate.subjectUniqueID.id',\n                            class: ASN.Class.UNIVERSAL,\n                            tag: ASN.Tag.BITSTRING,\n                            capture: 'certSubjectUniqueId',\n                        }],\n                }, {\n                    // Extensions (optional)\n                    name: 'Certificate.TBSCertificate.extensions',\n                    class: ASN.Class.CONTEXT_SPECIFIC,\n                    tag: ASN.Tag.BITSTRING,\n                    capture: 'certExtensions',\n                    optional: true,\n                }],\n        }, {\n            // AlgorithmIdentifier (signature algorithm)\n            name: 'Certificate.signatureAlgorithm',\n            class: ASN.Class.UNIVERSAL,\n            tag: ASN.Tag.SEQUENCE,\n            value: [{\n                    // algorithm\n                    name: 'Certificate.signatureAlgorithm.algorithm',\n                    class: ASN.Class.UNIVERSAL,\n                    tag: ASN.Tag.OID,\n                    capture: 'certSignatureOID',\n                }, {\n                    name: 'Certificate.TBSCertificate.signature.parameters',\n                    class: ASN.Class.UNIVERSAL,\n                    tag: ASN.Tag.OCTETSTRING,\n                    optional: true,\n                    capture: 'certSignatureParams',\n                }],\n        }, {\n            name: 'Certificate.signatureValue',\n            class: ASN.Class.UNIVERSAL,\n            tag: ASN.Tag.BITSTRING,\n            capture: 'certSignature',\n        }],\n};\n\nexport function getDERFromPEM(pem) {\n  return ASN.PEM.parse(pem)[0].body;\n}\n\nfunction toBase64URL(buffer) {\n    return buffer.toString('base64').replace(/=/g, \"\").replace(/\\+/g, \"-\").replace(/\\//g, \"_\")\n}\n\nexport function getJWTFromPEM(pem) {\n  const obj = ASN.ASN1.fromDER(getDERFromPEM(pem), true);\n\n  let publicKey = { oid: undefined, keyRaw: undefined};\n  if (pem.includes(\"CERTIFICATE\")) {\n    const certCaptures = {};\n    obj.validate(x509CertificateValidator, certCaptures);\n\n    const publicKeyCaptures = {};\n    certCaptures.publicKeyInfo.validate(PublicKeyValidator, publicKeyCaptures);\n\n    publicKey.oid = ASN.ASN1.parseOID(publicKeyCaptures.publicKeyOID.bytes)\n    publicKey.keyRaw = ASN.ASN1.parseBitString(publicKeyCaptures.publicKey.bytes).buf;\n  } else {\n    const captures = {};\n    obj.validate(PublicKeyValidator, captures);\n    \n    publicKey.oid = ASN.ASN1.parseOID(captures.publicKeyOID.bytes)\n    publicKey.keyRaw = ASN.ASN1.parseBitString(captures.publicKey.bytes).buf;\n  }\n\n  // if RSA\n  // Find better ways to parse key parameters. \n  if (publicKey.oid === RSA_IOD) {\n    let pk = publicKey.keyRaw\n    const keyMod = toBase64URL(pk.slice(9, pk.length - 5));\n    const keyExp = toBase64URL(pk.slice(pk.length - 3,pk.length));\n    return {alg: 'PS256', kid: undefined, n: keyMod, e: keyExp};\n  } else {\n    let pk = publicKey.keyRaw\n    const keyX = toBase64URL(pk.slice(1, 1+32));\n    const keyY = toBase64URL(pk.slice(33,33+32));\n    return {alg: 'ES256', kid: undefined, x: keyX, y: keyY};\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}