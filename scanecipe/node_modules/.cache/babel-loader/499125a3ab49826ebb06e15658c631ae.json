{"ast":null,"code":"import fetch from 'cross-fetch';\nlet TRUST_REGISTRY = {};\nlet LAST_FETCH = undefined;\nconst ONE_DAY_IN_MSECONDS = 86400000;\n/** add kid, public cert PEM pairs  */\n\nexport function addCachedCerts(array) {\n  for (const [key, value] of Object.entries(array)) {\n    TRUST_REGISTRY[key] = {\n      \"displayName\": {\n        \"en\": \"\"\n      },\n      \"entityType\": \"issuer\",\n      \"status\": \"current\",\n      \"credentialType\": [\"v\", \"t\", \"r\"],\n      \"validFromDT\": \"2021-01-01T01:00:00.000Z\",\n      \"didDocument\": '-----BEGIN CERTIFICATE-----\\n' + value + '\\n-----END CERTIFICATE-----'\n    };\n  }\n}\n/** add kid, public key PEM pairs  */\n\nexport function addCachedKeys(array) {\n  for (const [key, value] of Object.entries(array)) {\n    TRUST_REGISTRY[key] = {\n      \"displayName\": {\n        \"en\": \"\"\n      },\n      \"entityType\": \"issuer\",\n      \"status\": \"current\",\n      \"credentialType\": [\"v\", \"t\", \"r\"],\n      \"validFromDT\": \"2021-01-01T01:00:00.000Z\",\n      \"didDocument\": '-----BEGIN PUBLIC KEY-----\\n' + value + '\\n-----END PUBLIC KEY-----'\n    };\n  }\n}\nexport async function resolveKey(kID) {\n  if (!TRUST_REGISTRY[kID] && (!LAST_FETCH || new Date().getTime() > LAST_FETCH.getTime() + ONE_DAY_IN_MSECONDS)) {\n    // Loading PathCheck Registry\n    console.log('KeyID not found: ', kID, ' fetching certificates from PathCheck\\'s Trust Registry');\n\n    try {\n      const res = await fetch('https://raw.githubusercontent.com/Path-Check/trust-registry/main/registry.json', {\n        method: 'GET',\n        mode: 'no-cors'\n      });\n      const data = await res.text();\n      TRUST_REGISTRY = JSON.parse(data)[\"EUDCC\"];\n    } catch (e) {\n      console.log(e);\n    }\n\n    LAST_FETCH = new Date();\n  }\n\n  if (TRUST_REGISTRY[kID]) {\n    return TRUST_REGISTRY[kID];\n  }\n\n  return undefined;\n}","map":{"version":3,"sources":["/Users/jakechoi/Documents/StormhacksFall2024/stormhacks-2024/scanecipe/node_modules/@pathcheck/dcc-sdk/lib/resolver.js"],"names":["fetch","TRUST_REGISTRY","LAST_FETCH","undefined","ONE_DAY_IN_MSECONDS","addCachedCerts","array","key","value","Object","entries","addCachedKeys","resolveKey","kID","Date","getTime","console","log","res","method","mode","data","text","JSON","parse","e"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,aAAlB;AAEA,IAAIC,cAAc,GAAG,EAArB;AAEA,IAAIC,UAAU,GAAGC,SAAjB;AACA,MAAMC,mBAAmB,GAAG,QAA5B;AAEA;;AACA,OAAO,SAASC,cAAT,CAAwBC,KAAxB,EAA+B;AACpC,OAAK,MAAM,CAACC,GAAD,EAAMC,KAAN,CAAX,IAA2BC,MAAM,CAACC,OAAP,CAAeJ,KAAf,CAA3B,EAAkD;AAChDL,IAAAA,cAAc,CAACM,GAAD,CAAd,GAAsB;AACpB,qBAAe;AAAG,cAAM;AAAT,OADK;AAEpB,oBAAc,QAFM;AAGpB,gBAAU,SAHU;AAIpB,wBAAkB,CAAC,GAAD,EAAK,GAAL,EAAS,GAAT,CAJE;AAKpB,qBAAgB,0BALI;AAMpB,qBAAe,kCAAkCC,KAAlC,GAA0C;AANrC,KAAtB;AAQD;AACF;AAED;;AACA,OAAO,SAASG,aAAT,CAAuBL,KAAvB,EAA8B;AACnC,OAAK,MAAM,CAACC,GAAD,EAAMC,KAAN,CAAX,IAA2BC,MAAM,CAACC,OAAP,CAAeJ,KAAf,CAA3B,EAAkD;AAChDL,IAAAA,cAAc,CAACM,GAAD,CAAd,GAAsB;AACpB,qBAAe;AAAG,cAAM;AAAT,OADK;AAEpB,oBAAc,QAFM;AAGpB,gBAAU,SAHU;AAIpB,wBAAkB,CAAC,GAAD,EAAK,GAAL,EAAS,GAAT,CAJE;AAKpB,qBAAgB,0BALI;AAMpB,qBAAe,iCAAiCC,KAAjC,GAAyC;AANpC,KAAtB;AAQD;AACF;AAED,OAAO,eAAeI,UAAf,CAA0BC,GAA1B,EAA+B;AACpC,MAAI,CAACZ,cAAc,CAACY,GAAD,CAAf,KAAyB,CAACX,UAAD,IAAe,IAAIY,IAAJ,GAAWC,OAAX,KAAuBb,UAAU,CAACa,OAAX,KAAuBX,mBAAtF,CAAJ,EAAiH;AAC/G;AACAY,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCJ,GAAjC,EAAsC,yDAAtC;;AAEA,QAAI;AACF,YAAMK,GAAG,GAAG,MAAMlB,KAAK,CAAC,gFAAD,EAAmF;AAACmB,QAAAA,MAAM,EAAE,KAAT;AAAgBC,QAAAA,IAAI,EAAE;AAAtB,OAAnF,CAAvB;AACA,YAAMC,IAAI,GAAG,MAAMH,GAAG,CAACI,IAAJ,EAAnB;AACArB,MAAAA,cAAc,GAAGsB,IAAI,CAACC,KAAL,CAAWH,IAAX,EAAiB,OAAjB,CAAjB;AACD,KAJD,CAIE,OAAOI,CAAP,EAAU;AACVT,MAAAA,OAAO,CAACC,GAAR,CAAYQ,CAAZ;AACD;;AAEDvB,IAAAA,UAAU,GAAG,IAAIY,IAAJ,EAAb;AACD;;AAED,MAAIb,cAAc,CAACY,GAAD,CAAlB,EAAyB;AACvB,WAAOZ,cAAc,CAACY,GAAD,CAArB;AACD;;AAED,SAAOV,SAAP;AACD","sourcesContent":["import fetch from 'cross-fetch'\n\nlet TRUST_REGISTRY = {}\n\nlet LAST_FETCH = undefined;\nconst ONE_DAY_IN_MSECONDS = 86400000;\n\n/** add kid, public cert PEM pairs  */\nexport function addCachedCerts(array) {\n  for (const [key, value] of Object.entries(array)) {\n    TRUST_REGISTRY[key] = {\n      \"displayName\": {  \"en\": \"\" },\n      \"entityType\": \"issuer\",\n      \"status\": \"current\",\n      \"credentialType\": [\"v\",\"t\",\"r\"],\n      \"validFromDT\":  \"2021-01-01T01:00:00.000Z\",\n      \"didDocument\": '-----BEGIN CERTIFICATE-----\\n' + value + '\\n-----END CERTIFICATE-----'\n    }\n  }\n}\n\n/** add kid, public key PEM pairs  */\nexport function addCachedKeys(array) {\n  for (const [key, value] of Object.entries(array)) {\n    TRUST_REGISTRY[key] = {\n      \"displayName\": {  \"en\": \"\" },\n      \"entityType\": \"issuer\",\n      \"status\": \"current\",\n      \"credentialType\": [\"v\",\"t\",\"r\"],\n      \"validFromDT\":  \"2021-01-01T01:00:00.000Z\",\n      \"didDocument\": '-----BEGIN PUBLIC KEY-----\\n' + value + '\\n-----END PUBLIC KEY-----'\n    }\n  }\n}\n\nexport async function resolveKey(kID) {\n  if (!TRUST_REGISTRY[kID] && (!LAST_FETCH || new Date().getTime() > LAST_FETCH.getTime() + ONE_DAY_IN_MSECONDS )) {\n    // Loading PathCheck Registry\n    console.log('KeyID not found: ', kID, ' fetching certificates from PathCheck\\'s Trust Registry')\n\n    try {\n      const res = await fetch('https://raw.githubusercontent.com/Path-Check/trust-registry/main/registry.json', {method: 'GET', mode: 'no-cors'})\n      const data = await res.text()\n      TRUST_REGISTRY = JSON.parse(data)[\"EUDCC\"];\n    } catch (e) {\n      console.log(e);\n    }\n\n    LAST_FETCH = new Date();\n  }\n\n  if (TRUST_REGISTRY[kID]) {\n    return TRUST_REGISTRY[kID];\n  }\n\n  return undefined\n}\n"]},"metadata":{},"sourceType":"module"}