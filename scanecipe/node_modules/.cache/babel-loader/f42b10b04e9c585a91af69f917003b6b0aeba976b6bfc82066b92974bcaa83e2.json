{"ast":null,"code":"var _jsxFileName = \"/Users/jakechoi/Documents/StormhacksFall2024/stormhacks-2024/scanecipe/src/BarcodeScanner.js\",\n  _s = $RefreshSig$();\n// src/BarcodeScanner.js\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport Koder from '@maslick/koder';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BarcodeScanner = () => {\n  _s();\n  const videoRef = useRef(null);\n  const [scannedData, setScannedData] = useState('');\n  const [error, setError] = useState('');\n  useEffect(() => {\n    const koder = new Koder();\n    const initCamera = async () => {\n      try {\n        const videoStream = await navigator.mediaDevices.getUserMedia({\n          video: {\n            facingMode: 'environment' // Use rear camera\n          }\n        });\n        videoRef.current.srcObject = videoStream;\n        videoRef.current.play();\n        const detectBarcode = () => {\n          koder.decodeFromVideo(videoRef.current).then(result => {\n            if (result) {\n              setScannedData(result.data); // Store the scanned data\n              setError('');\n            }\n            requestAnimationFrame(detectBarcode); // Continue scanning\n          }).catch(err => {\n            console.error(err);\n            setError('Error decoding the barcode');\n          });\n        };\n        detectBarcode(); // Start scanning\n      } catch (err) {\n        console.error(err);\n        setError('Error accessing camera');\n      }\n    };\n    initCamera();\n    return () => {\n      // Cleanup when the component unmounts\n      if (videoRef.current.srcObject) {\n        const stream = videoRef.current.srcObject;\n        const tracks = stream.getTracks();\n        tracks.forEach(track => track.stop());\n        videoRef.current.srcObject = null;\n      }\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Barcode Scanner\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n      ref: videoRef,\n      style: {\n        width: '100%',\n        maxWidth: '600px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), scannedData && /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Scanned Data: \", scannedData]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 23\n    }, this), error && /*#__PURE__*/_jsxDEV(\"h2\", {\n      style: {\n        color: 'red'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n_s(BarcodeScanner, \"NlKU01RoxwaCs/k4NWIwy5V62DI=\");\n_c = BarcodeScanner;\nexport default BarcodeScanner;\nvar _c;\n$RefreshReg$(_c, \"BarcodeScanner\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Koder","jsxDEV","_jsxDEV","BarcodeScanner","_s","videoRef","scannedData","setScannedData","error","setError","koder","initCamera","videoStream","navigator","mediaDevices","getUserMedia","video","facingMode","current","srcObject","play","detectBarcode","decodeFromVideo","then","result","data","requestAnimationFrame","catch","err","console","stream","tracks","getTracks","forEach","track","stop","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","style","width","maxWidth","color","_c","$RefreshReg$"],"sources":["/Users/jakechoi/Documents/StormhacksFall2024/stormhacks-2024/scanecipe/src/BarcodeScanner.js"],"sourcesContent":["// src/BarcodeScanner.js\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport Koder from '@maslick/koder';\n\nconst BarcodeScanner = () => {\n  const videoRef = useRef(null);\n  const [scannedData, setScannedData] = useState('');\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    const koder = new Koder();\n\n    const initCamera = async () => {\n      try {\n        const videoStream = await navigator.mediaDevices.getUserMedia({\n          video: {\n            facingMode: 'environment', // Use rear camera\n          },\n        });\n\n        videoRef.current.srcObject = videoStream;\n        videoRef.current.play();\n\n        const detectBarcode = () => {\n          koder.decodeFromVideo(videoRef.current)\n            .then(result => {\n              if (result) {\n                setScannedData(result.data); // Store the scanned data\n                setError('');\n              }\n              requestAnimationFrame(detectBarcode); // Continue scanning\n            })\n            .catch(err => {\n              console.error(err);\n              setError('Error decoding the barcode');\n            });\n        };\n\n        detectBarcode(); // Start scanning\n      } catch (err) {\n        console.error(err);\n        setError('Error accessing camera');\n      }\n    };\n\n    initCamera();\n\n    return () => {\n      // Cleanup when the component unmounts\n      if (videoRef.current.srcObject) {\n        const stream = videoRef.current.srcObject;\n        const tracks = stream.getTracks();\n        tracks.forEach((track) => track.stop());\n        videoRef.current.srcObject = null;\n      }\n    };\n  }, []);\n\n  return (\n    <div>\n      <h1>Barcode Scanner</h1>\n      <video ref={videoRef} style={{ width: '100%', maxWidth: '600px' }} />\n      {scannedData && <h2>Scanned Data: {scannedData}</h2>}\n      {error && <h2 style={{ color: 'red' }}>{error}</h2>}\n    </div>\n  );\n};\n\nexport default BarcodeScanner;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}